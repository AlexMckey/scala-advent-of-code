"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1295],{1262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(7462),i=(n(7294),n(3905)),s=n(6340);const r={},l="Day 13: Distress Signal",o={unversionedId:"2022/puzzles/day13",id:"2022/puzzles/day13",title:"Day 13: Distress Signal",description:"by Jamie Thompson",source:"@site/target/mdoc/2022/puzzles/day13.md",sourceDirName:"2022/puzzles",slug:"/2022/puzzles/day13",permalink:"/scala-advent-of-code/2022/puzzles/day13",draft:!1,editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/2022/puzzles/day13.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 12: Hill Climbing Algorithm",permalink:"/scala-advent-of-code/2022/puzzles/day12"},next:{title:"Day 14: Regolith Reservoir",permalink:"/scala-advent-of-code/2022/puzzles/day14"}},d={},c=[{value:"Puzzle description",id:"puzzle-description",level:2},{value:"Final Code",id:"final-code",level:2},{value:"Run it in the browser",id:"run-it-in-the-browser",level:3},{value:"Part 1",id:"part-1",level:4},{value:"Part 2",id:"part-2",level:4},{value:"Solutions from the community",id:"solutions-from-the-community",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"day-13-distress-signal"},"Day 13: Distress Signal"),(0,i.kt)("p",null,"by ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/bishabosha"},"Jamie Thompson")),(0,i.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://adventofcode.com/2022/day/13"},"https://adventofcode.com/2022/day/13")),(0,i.kt)("h2",{id:"final-code"},"Final Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import scala.collection.immutable.Queue\nimport scala.math.Ordered.given\nimport Packet.*\n\ndef part1(input: String): Int =\n  findOrderedIndices(input)\n\ndef part2(input: String): Int =\n  findDividerIndices(input)\n\ndef findOrderedIndices(input: String): Int =\n  val indices = (\n    for\n      case (Seq(a, b, _*), i) <- input.linesIterator.grouped(3).zipWithIndex\n      if readPacket(a) <= readPacket(b)\n    yield\n      i + 1\n  )\n  indices.sum\n\ndef findDividerIndices(input: String): Int =\n  val dividers = List(\"[[2]]\", \"[[6]]\").map(readPacket)\n  val lookup = dividers.toSet\n  val packets = input\n    .linesIterator\n    .filter(_.nonEmpty)\n    .map(readPacket)\n  val indices = (dividers ++ packets)\n    .sorted\n    .iterator\n    .zipWithIndex\n    .collect { case (p, i) if lookup.contains(p) => i + 1 }\n  indices.take(2).product\n\nenum Packet:\n  case Nested(packets: List[Packet])\n  case Num(value: Int)\n\ncase class State(number: Int, values: Queue[Packet]):\n  def nextWithDigit(digit: Int): State = // add digit to number\n    copy(number = if number == -1 then digit else number * 10 + digit)\n\n  def nextWithNumber: State =\n    if number == -1 then this // no number to commit\n    else\n      // reset number, add accumulated number to values\n      State.empty.copy(values = values :+ Num(number))\n\nobject State:\n  val empty = State(-1, Queue.empty)\n\ndef readPacket(input: String): Packet =\n  def loop(i: Int, state: State, stack: List[Queue[Packet]]): Packet =\n    input(i) match // assume that list is well-formed.\n      case '[' =>\n        loop(i + 1, State.empty, state.values :: stack) // push old state to stack\n      case ']' => // add trailing number, close packet\n        val packet = Nested(state.nextWithNumber.values.toList)\n        stack match\n          case values1 :: rest => // restore old state\n            loop(i + 1, State.empty.copy(values = values1 :+ packet), rest)\n          case Nil => // terminating case\n            packet\n      case ',' => loop(i + 1, state.nextWithNumber, stack)\n      case n => loop(i + 1, state.nextWithDigit(n.asDigit), stack)\n  end loop\n  if input.nonEmpty && input(0) == '[' then\n    loop(i = 1, State.empty, stack = Nil)\n  else\n    throw IllegalArgumentException(s\"Invalid input: `$input`\")\nend readPacket\n\ngiven PacketOrdering: Ordering[Packet] with\n\n  def nestedCompare(ls: List[Packet], rs: List[Packet]): Int = (ls, rs) match\n    case (l :: ls1, r :: rs1) =>\n      val res = compare(l, r)\n      if res == 0 then nestedCompare(ls1, rs1) // equal, look at next element\n      else res // less or greater\n\n    case (_ :: _, Nil) => 1  // right ran out of elements first\n    case (Nil, _ :: _) => -1 // left ran out of elements first\n    case (Nil, Nil)    => 0  // equal size\n  end nestedCompare\n\n  def compare(left: Packet, right: Packet): Int = (left, right) match\n    case (Num(l), Num(r))          => l compare r\n    case (Nested(l), Nested(r))    => nestedCompare(l, r)\n    case (num @ Num(_), Nested(r)) => nestedCompare(num :: Nil, r)\n    case (Nested(l), num @ Num(_)) => nestedCompare(l, num :: Nil)\n  end compare\n\nend PacketOrdering\n")),(0,i.kt)("h3",{id:"run-it-in-the-browser"},"Run it in the browser"),(0,i.kt)("h4",{id:"part-1"},"Part 1"),(0,i.kt)(s.Z,{puzzle:"day13-part1",year:"2022",mdxType:"Solver"}),(0,i.kt)("h4",{id:"part-2"},"Part 2"),(0,i.kt)(s.Z,{puzzle:"day13-part2",year:"2022",mdxType:"Solver"}),(0,i.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erikvanoosten/advent-of-code/blob/main/src/main/scala/nl/grons/advent/y2022/Day13.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/erikvanoosten"},"Erik van Oosten")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/AvaPL/Advent-of-Code-2022/tree/main/src/main/scala/day13"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/AvaPL"},"Pawe\u0142 Cembaluk"))),(0,i.kt)("p",null,"Share your solution to the Scala community by editing this page. (You can even write the whole article!)"))}p.isMDXComponent=!0}}]);