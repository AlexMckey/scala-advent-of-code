"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[185],{2438:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905)),l=n(6340);const r={},o="Day 6: Tuning Trouble",s={unversionedId:"2022/puzzles/day06",id:"2022/puzzles/day06",title:"Day 6: Tuning Trouble",description:"code by Jan Boerman, article by Quentin Bernet",source:"@site/target/mdoc/2022/puzzles/day06.md",sourceDirName:"2022/puzzles",slug:"/2022/puzzles/day06",permalink:"/scala-advent-of-code/2022/puzzles/day06",draft:!1,editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/2022/puzzles/day06.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 5: Supply Stacks",permalink:"/scala-advent-of-code/2022/puzzles/day05"},next:{title:"Day 1: Sonar Sweep",permalink:"/scala-advent-of-code/puzzles/day1"}},d={},p=[{value:"Puzzle description",id:"puzzle-description",level:2},{value:"Solution",id:"solution",level:2},{value:"Final Code",id:"final-code",level:2},{value:"Run it in the browser",id:"run-it-in-the-browser",level:3},{value:"Part 1",id:"part-1",level:4},{value:"Part 2",id:"part-2",level:4},{value:"Solutions from the community",id:"solutions-from-the-community",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"day-6-tuning-trouble"},"Day 6: Tuning Trouble"),(0,i.kt)("p",null,"code by ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/JanBoerman95"},"Jan Boerman"),", article by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Sporarum"},"Quentin Bernet")),(0,i.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://adventofcode.com/2022/day/6"},"https://adventofcode.com/2022/day/6")),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("p",null,"The goal today is to find the first spot of the input with 4 consecutive characters that are all different."),(0,i.kt)("p",null,"There are thus three steps: look at chunks of 4 consecutive characters, check if they are all different, and find the first index among those."),(0,i.kt)("p",null,"To look at windows of 4 characters, we can use the ",(0,i.kt)("a",{parentName:"p",href:"https://www.scala-lang.org/api/current/scala/collection/StringOps.html#sliding(size:Int,step:Int):Iterator%5BString%5D"},(0,i.kt)("inlineCode",{parentName:"a"},"sliding")," method")," on ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),"s with 4 as the ",(0,i.kt)("inlineCode",{parentName:"p"},"size"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Scala"},"  val windows = input.sliding(4)\n")),(0,i.kt)("p",null,"To check if characters in a string are all different, a nice trick is to first convert it to a ",(0,i.kt)("inlineCode",{parentName:"p"},"Set"),", and then testing if the size is the same as the original:\n",(0,i.kt)("inlineCode",{parentName:"p"},"myString.toSet.size == myString.size"),".\nIn this case we know the size will always be 4, because ",(0,i.kt)("inlineCode",{parentName:"p"},"sliding(4)")," always returns strings of length 4, so we can write:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Scala"},"  def allDifferent(s: String): Boolean = s.toSet.size == 4\n")),(0,i.kt)("p",null,"The last piece of the puzzle is to find the first index where a condition is true, again the standard library has something for us: ",(0,i.kt)("a",{parentName:"p",href:"https://www.scala-lang.org/api/current/scala/collection/StringOps.html#indexWhere(p:Char=%3EBoolean,from:Int):Int"},(0,i.kt)("inlineCode",{parentName:"a"},"indexWhere")),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Scala"},"  val firstIndex = windows.indexWhere(allDifferent)\n")),(0,i.kt)("p",null,"We can now assemble everything:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Scala"},"def part1(input: String): Int =\n  val windows = input.sliding(4)\n  def allDifferent(s: String): Boolean = s.toSet.size == 4\n  val firstIndex = windows.indexWhere(allDifferent)\n  firstIndex + 4\n")),(0,i.kt)("p",null,"You'll notice we have to add 4 to the final answer, that's because ",(0,i.kt)("inlineCode",{parentName:"p"},"firstIndex")," tells us the index of the first character of the window, and we want the last one."),(0,i.kt)("p",null,"That was only the solution for the first part, but the only difference for part 2 is that the sequences need to be of 14 characters instead of 4!"),(0,i.kt)("p",null,"So we can just extract our logic into a nice function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Scala"},"def findIndex(input: String, n: Int): Int =\n  val windows = input.sliding(n)\n  def allDifferent(s: String): Boolean = s.toSet.size == n\n  val firstIndex = windows.indexWhere(allDifferent)\n  firstIndex + n\n")),(0,i.kt)("p",null,"And inline the intermediate results:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"def findIndex(input: String, n: Int): Int =\n  input.sliding(n).indexWhere(_.toSet.size == n) + n\n")),(0,i.kt)("p",null,"There we have it, a one-line solution!"),(0,i.kt)("p",null,"P.S: ",(0,i.kt)("inlineCode",{parentName:"p"},"sliding"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"toSet"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"indexWhere")," are not only available for ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),"s but for almost all collections!"),(0,i.kt)("h2",{id:"final-code"},"Final Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"def part1(input: String): Int =\n  findIndex(input, n = 4)\n\ndef part2(input: String): Int =\n  findIndex(input, n = 14)\n\ndef findIndex(input: String, n: Int): Int =\n  input.sliding(n).indexWhere(_.toSet.size == n) + n\n")),(0,i.kt)("h3",{id:"run-it-in-the-browser"},"Run it in the browser"),(0,i.kt)("h4",{id:"part-1"},"Part 1"),(0,i.kt)(l.Z,{puzzle:"day06-part1",year:"2022",mdxType:"Solver"}),(0,i.kt)("h4",{id:"part-2"},"Part 2"),(0,i.kt)(l.Z,{puzzle:"day06-part2",year:"2022",mdxType:"Solver"}),(0,i.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Jannyboy11/AdventOfCode2022/blob/master/src/main/scala/day06/Day06.scala"},"Solution")," of ",(0,i.kt)("a",{parentName:"li",href:"https://twitter.com/JanBoerman95"},"Jan Boerman"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/SethTisue/adventofcode/blob/main/2022/src/test/scala/Day06.scala"},"Solution")," of ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/SethTisue"},"Seth Tisue"))),(0,i.kt)("p",null,"Share your solution to the Scala community by editing this page."))}c.isMDXComponent=!0}}]);