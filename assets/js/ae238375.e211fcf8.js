"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[243],{4180:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var o=n(7462),a=(n(7294),n(3905)),i=n(6340);const s={},r="Day 9: Rope Bridge",l={unversionedId:"2022/puzzles/day09",id:"2022/puzzles/day09",title:"Day 9: Rope Bridge",description:"code by Jamie Thompson",source:"@site/target/mdoc/2022/puzzles/day09.md",sourceDirName:"2022/puzzles",slug:"/2022/puzzles/day09",permalink:"/scala-advent-of-code/2022/puzzles/day09",draft:!1,editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/2022/puzzles/day09.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 8: Treetop Tree House",permalink:"/scala-advent-of-code/2022/puzzles/day08"},next:{title:"Day 1: Sonar Sweep",permalink:"/scala-advent-of-code/puzzles/day1"}},d={},p=[{value:"Puzzle description",id:"puzzle-description",level:2},{value:"Final Code",id:"final-code",level:2},{value:"Run it in the browser",id:"run-it-in-the-browser",level:3},{value:"Part 1",id:"part-1",level:4},{value:"Part 2",id:"part-2",level:4},{value:"Solutions from the community",id:"solutions-from-the-community",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"day-9-rope-bridge"},"Day 9: Rope Bridge"),(0,a.kt)("p",null,"code by ",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/bishabosha"},"Jamie Thompson")),(0,a.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://adventofcode.com/2022/day/9"},"https://adventofcode.com/2022/day/9")),(0,a.kt)("h2",{id:"final-code"},"Final Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import Direction.*\n\ndef part1(input: String): Int =\n  uniquePositions(input, knots = 2)\n\ndef part2(input: String): Int =\n  uniquePositions(input, knots = 10)\n\ncase class Position(x: Int, y: Int):\n  def moveOne(dir: Direction): Position = dir match\n    case U => Position(x, y + 1)\n    case D => Position(x, y - 1)\n    case L => Position(x - 1, y)\n    case R => Position(x + 1, y)\n\n  def follow(head: Position): Position =\n    val dx = head.x - x\n    val dy = head.y - y\n    if dx.abs > 1 || dy.abs > 1 then Position(x + dx.sign, y + dy.sign) // follow the head\n    else this // stay put\n\ncase class State(uniques: Set[Position], head: Position, knots: List[Position])\n\nenum Direction:\n  case U, D, L, R\n\n\ndef followAll(head: Position, knots: List[Position]) =\n  knots.foldLeft((head, List.newBuilder[Position])) { case ((prev, knots), knot) =>\n    val next = knot.follow(prev)\n    (next, knots += next)\n  }\n\ndef moves(state: State, dir: Direction): Iterator[State] =\n  Iterator.iterate(state)({ case State(uniques, head, knots) =>\n    val head1 = head.moveOne(dir)\n    val (terminal, knots1) = followAll(head1, knots)\n    State(uniques + terminal, head1, knots1.result())\n  })\n\ndef uniquePositions(input: String, knots: Int): Int =\n  val zero = Position(0, 0)\n  val empty = State(Set(zero), zero, List.fill(knots - 1)(zero))\n  val end = input.linesIterator.foldLeft(empty) { case (state, line) =>\n    val (s"$dir $steps") = line: @unchecked\n    moves(state, Direction.valueOf(dir)).drop(steps.toInt).next()\n  }\n  end.uniques.size\n')),(0,a.kt)("h3",{id:"run-it-in-the-browser"},"Run it in the browser"),(0,a.kt)("h4",{id:"part-1"},"Part 1"),(0,a.kt)(i.Z,{puzzle:"day09-part1",year:"2022",mdxType:"Solver"}),(0,a.kt)("h4",{id:"part-2"},"Part 2"),(0,a.kt)(i.Z,{puzzle:"day09-part2",year:"2022",mdxType:"Solver"}),(0,a.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/MewenCrespo/Advent-Of-Code/blob/main/src/adventofcode/year2022/Day9.scala"},"Solution")," of ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/MewenCrespo"},"Mewen Crespo")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Jannyboy11/AdventOfCode2022/blob/master/src/main/scala/day09/Day09.scala"},"Solution")," of ",(0,a.kt)("a",{parentName:"li",href:"https://twitter.com/JanBoerman95"},"Jan Boerman"),".")),(0,a.kt)("p",null,"Share your solution to the Scala community by editing this page."))}c.isMDXComponent=!0}}]);