"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[970],{4045:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return r},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),l=n(5623),p=["components"],s={},r="Day 11: Dumbo Octopus",c={unversionedId:"puzzles/day11",id:"puzzles/day11",isDocsHomePage:!1,title:"Day 11: Dumbo Octopus",description:"by @tgodzik",source:"@site/target/mdoc/puzzles/day11.md",sourceDirName:"puzzles",slug:"/puzzles/day11",permalink:"/scala-advent-of-code/puzzles/day11",editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/puzzles/day11.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 10: Syntax Scoring",permalink:"/scala-advent-of-code/puzzles/day10"},next:{title:"Day 12: Passage Pathing",permalink:"/scala-advent-of-code/puzzles/day12"}},u=[{value:"Puzzle description",id:"puzzle-description",children:[],level:2},{value:"Final Solution",id:"final-solution",children:[],level:2},{value:"Run it in the browser",id:"run-it-in-the-browser",children:[{value:"Part 1",id:"part-1",children:[],level:3},{value:"Part 2",id:"part-2",children:[],level:3}],level:2},{value:"Run it locally",id:"run-it-locally",children:[],level:2},{value:"Solutions from the community",id:"solutions-from-the-community",children:[],level:2}],d={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,p);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"day-11-dumbo-octopus"},"Day 11: Dumbo Octopus"),(0,i.kt)("p",null,"by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tgodzik"},"@tgodzik")),(0,i.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://adventofcode.com/2021/day/11"},"https://adventofcode.com/2021/day/11")),(0,i.kt)("h2",{id:"final-solution"},"Final Solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"trait Step:\n  def increment: Step\n  def addFlashes(f: Int): Step\n  def shouldStop: Boolean\n  def currentFlashes: Int\n  def stepNumber: Int\n\ncase class MaxIterStep(currentFlashes: Int, stepNumber: Int, max: Int) extends Step:\n  def increment = this.copy(stepNumber = stepNumber + 1)\n  def addFlashes(f: Int) = this.copy(currentFlashes = currentFlashes + f)\n  def shouldStop = stepNumber == max\n\ncase class SynchronizationStep(\n    currentFlashes: Int,\n    stepNumber: Int,\n    maxChange: Int,\n    lastFlashes: Int\n) extends Step:\n  def increment = this.copy(stepNumber = stepNumber + 1)\n  def addFlashes(f: Int) =\n    this.copy(currentFlashes = currentFlashes + f, lastFlashes = currentFlashes)\n  def shouldStop = currentFlashes - lastFlashes == maxChange\n\ncase class Point(x: Int, y: Int)\ncase class Octopei(inputMap: Map[Point, Int]):\n\n  @tailrec\n  private def propagate(\n      toVisit: Queue[Point],\n      alreadyFlashed: Set[Point],\n      currentSituation: Map[Point, Int]\n  ): Map[Point, Int] =\n    toVisit.dequeueOption match\n      case None => currentSituation\n      case Some((point, dequeued)) =>\n        currentSituation.get(point) match\n          case Some(value) if value > 9 && !alreadyFlashed(point) =>\n            val propagated =\n              Seq(\n                point.copy(x = point.x + 1),\n                point.copy(x = point.x - 1),\n                point.copy(y = point.y + 1),\n                point.copy(y = point.y - 1),\n                point.copy(x = point.x + 1, y = point.y + 1),\n                point.copy(x = point.x + 1, y = point.y - 1),\n                point.copy(x = point.x - 1, y = point.y + 1),\n                point.copy(x = point.x - 1, y = point.y - 1)\n              )\n            val newSituation = propagated.foldLeft(currentSituation) {\n              case (map, point) =>\n                map.get(point) match\n                  case Some(value) => map.updated(point, value + 1)\n                  case _       => map\n            }\n            propagate(\n              dequeued.appendedAll(propagated),\n              alreadyFlashed + point,\n              newSituation\n            )\n          case _ =>\n            propagate(dequeued, alreadyFlashed, currentSituation)\n  end propagate\n\n  def simulate(step: Step) = simulateIter(step, inputMap)\n\n  @tailrec\n  private def simulateIter(\n      step: Step,\n      currentSituation: Map[Point, Int]\n  ): Step =\n    if step.shouldStop then step\n    else\n      val incremented = currentSituation.map { case (point, value) =>\n        (point, value + 1)\n      }\n      val flashes = incremented.collect {\n        case (point, value) if value > 9 => point\n      }.toList\n      val propagated = propagate(Queue(flashes*), Set.empty, incremented)\n      val newFlashes = propagated.collect {\n        case (point, value) if value > 9 => 1\n      }.sum\n      val zeroed = propagated.map {\n        case (point, value) if value > 9 => (point, 0)\n        case same            => same\n      }\n      simulateIter(step.increment.addFlashes(newFlashes), zeroed)\n  end simulateIter\n\nend Octopei\n\ndef part1(input: String) =\n  val octopei = parse(input)\n  val step = MaxIterStep(0, 0, 100)\n  octopei.simulate(step).currentFlashes\n\ndef part2(input: String) =\n  val octopei = parse(input)\n  val step = SynchronizationStep(0, 0, octopei.inputMap.size, 0)\n  octopei.simulate(step).stepNumber\n")),(0,i.kt)("h2",{id:"run-it-in-the-browser"},"Run it in the browser"),(0,i.kt)("h3",{id:"part-1"},"Part 1"),(0,i.kt)(l.Z,{puzzle:"day11-part1",mdxType:"Solver"}),(0,i.kt)("h3",{id:"part-2"},"Part 2"),(0,i.kt)(l.Z,{puzzle:"day11-part2",mdxType:"Solver"}),(0,i.kt)("h2",{id:"run-it-locally"},"Run it locally"),(0,i.kt)("p",null,"You can get this solution locally by cloning the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/scalacenter/scala-advent-of-code"},"scalacenter/scala-advent-of-code")," repository."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ git clone https://github.com/scalacenter/scala-advent-of-code\n$ cd scala-advent-of-code\n")),(0,i.kt)("p",null,"You can run it with ",(0,i.kt)("a",{parentName:"p",href:"https://scala-cli.virtuslab.org/"},"scala-cli"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ scala-cli src -M day11.part1\nThe answer is: 1673\n\n$ scala-cli src -M day11.part2\nThe answer is: 279\n")),(0,i.kt)("p",null,"You can replace the content of the ",(0,i.kt)("inlineCode",{parentName:"p"},"input/day11")," file with your own input from ",(0,i.kt)("a",{parentName:"p",href:"https://adventofcode.com/2021/day/11"},"adventofcode.com")," to get your own solution."),(0,i.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/tOverney/AdventOfCode2021/blob/main/src/main/scala/ch/overney/aoc/day11/"},"Solution")," of ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/tOverney"},"@tOverney"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Jannyboy11/AdventOfCode2021/blob/main/src/main/scala/day11/Day11.scala"},"Solution")," of ",(0,i.kt)("a",{parentName:"li",href:"https://twitter.com/JanBoerman95"},"Jan Boerman"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/FlorianCassayre/AdventOfCode-2021/blob/master/src/main/scala/adventofcode/solutions/Day11.scala"},"Solution")," of ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/FlorianCassayre"},"@FlorianCassayre"),".")),(0,i.kt)("p",null,"Share your solution to the Scala community by editing this page."))}m.isMDXComponent=!0}}]);