"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[508],{61:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),l=(a(7294),a(3905)),o=a(6340);const i={},r="Day 4: Camp Cleanup",s={unversionedId:"2022/puzzles/day04",id:"2022/puzzles/day04",title:"Day 4: Camp Cleanup",description:"by @bishabosha",source:"@site/target/mdoc/2022/puzzles/day04.md",sourceDirName:"2022/puzzles",slug:"/2022/puzzles/day04",permalink:"/scala-advent-of-code/2022/puzzles/day04",draft:!1,editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/2022/puzzles/day04.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 3: Rucksack Reorganization",permalink:"/scala-advent-of-code/2022/puzzles/day03"},next:{title:"Day 1: Sonar Sweep",permalink:"/scala-advent-of-code/puzzles/day1"}},d={},p=[{value:"Puzzle description",id:"puzzle-description",level:2},{value:"Final Code",id:"final-code",level:2},{value:"Run it in the browser",id:"run-it-in-the-browser",level:3},{value:"Part 1",id:"part-1",level:4},{value:"Part 2",id:"part-2",level:4},{value:"Solutions from the community",id:"solutions-from-the-community",level:2}],u={toc:p};function c(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"day-4-camp-cleanup"},"Day 4: Camp Cleanup"),(0,l.kt)("p",null,"by ",(0,l.kt)("a",{parentName:"p",href:"https://twitter.com/bishabosha"},"@bishabosha")),(0,l.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://adventofcode.com/2022/day/4"},"https://adventofcode.com/2022/day/4")),(0,l.kt)("h2",{id:"final-code"},"Final Code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'def part1(input: String): Int =\n  foldPairs(input, subsumes)\n\ndef part2(input: String): Int =\n  foldPairs(input, overlaps)\n\ndef subsumes(x: Int, y: Int)(a: Int, b: Int): Boolean = x <= a && y >= b\ndef overlaps(x: Int, y: Int)(a: Int, b: Int): Boolean = x <= a && y >= a || x <= b && y >= b\n\ndef foldPairs(input: String, hasOverlap: (Int, Int) => (Int, Int) => Boolean): Int =\n  val matches =\n    for line <- input.linesIterator yield\n      val Array(x,y,a,b) = line.split("[,-]").map(_.toInt): @unchecked\n      hasOverlap(x,y)(a,b) || hasOverlap(a,b)(x,y)\n  matches.count(identity)\n')),(0,l.kt)("h3",{id:"run-it-in-the-browser"},"Run it in the browser"),(0,l.kt)("h4",{id:"part-1"},"Part 1"),(0,l.kt)(o.Z,{puzzle:"day04-part1",year:"2022",mdxType:"Solver"}),(0,l.kt)("h4",{id:"part-2"},"Part 2"),(0,l.kt)(o.Z,{puzzle:"day04-part2",year:"2022",mdxType:"Solver"}),(0,l.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/Jannyboy11/AdventOfCode2022/blob/master/src/main/scala/day04/Day04.scala"},"Solution")," of ",(0,l.kt)("a",{parentName:"li",href:"https://twitter.com/JanBoerman95"},"Jan Boerman"),".")),(0,l.kt)("p",null,"Share your solution to the Scala community by editing this page."))}c.isMDXComponent=!0}}]);