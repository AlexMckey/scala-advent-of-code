"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[912],{5012:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>u,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>s});var o=a(7462),n=(a(7294),a(3905)),r=a(6340);const l={},u="Day 25: Sea Cucumber",c={unversionedId:"puzzles/day25",id:"puzzles/day25",title:"Day 25: Sea Cucumber",description:"by @Sporarum, student at EPFL, and @adpi2",source:"@site/target/mdoc/puzzles/day25.md",sourceDirName:"puzzles",slug:"/puzzles/day25",permalink:"/scala-advent-of-code/puzzles/day25",draft:!1,editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/puzzles/day25.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 24: Arithmetic Logic Unit",permalink:"/scala-advent-of-code/puzzles/day24"}},i={},s=[{value:"Puzzle description",id:"puzzle-description",level:2},{value:"Solution of Part 1",id:"solution-of-part-1",level:2},{value:"Run it in the browser",id:"run-it-in-the-browser",level:2},{value:"Part 1",id:"part-1",level:3},{value:"Run it locally",id:"run-it-locally",level:2},{value:"Solutions from the community",id:"solutions-from-the-community",level:2}],d={toc:s};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,o.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"day-25-sea-cucumber"},"Day 25: Sea Cucumber"),(0,n.kt)("p",null,"by ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/sporarum"},"@Sporarum"),", student at EPFL, and @adpi2"),(0,n.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://adventofcode.com/2021/day/25"},"https://adventofcode.com/2021/day/25")),(0,n.kt)("h2",{id:"solution-of-part-1"},"Solution of Part 1"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"enum SeaCucumber:\n  case Empty, East, South\n\nobject SeaCucumber:\n  def fromChar(c: Char) = c match\n    case '.' => Empty\n    case '>' => East\n    case 'v' => South\n\ntype Board = Seq[Seq[SeaCucumber]]\n\ndef part1(input: String): Int =\n  val board: Board = input.linesIterator.map(_.map(SeaCucumber.fromChar(_))).toSeq\n  fixedPoint(board)\n\ndef fixedPoint(board: Board, step: Int = 1): Int =\n  val next = move(board)\n  if board == next then step else fixedPoint(next, step + 1)\n\ndef move(board: Board) = moveSouth(moveEast(board))\ndef moveEast(board: Board) = moveImpl(board, SeaCucumber.East)\ndef moveSouth(board: Board) = moveImpl(board.transpose, SeaCucumber.South).transpose\n\ndef moveImpl(board: Board, cucumber: SeaCucumber): Board =\n  board.map { l =>\n    zip3(l.last +: l.init, l, (l.tail :+ l.head)).map{\n      case (`cucumber`, SeaCucumber.Empty, _) => `cucumber`\n      case (_, `cucumber`, SeaCucumber.Empty) => SeaCucumber.Empty\n      case (_, curr, _)  => curr\n    }\n  }\n\ndef zip3[A,B,C](l1: Seq[A], l2: Seq[B], l3: Seq[C]): Seq[(A,B,C)] =\n  l1.zip(l2).zip(l3).map { case ((a, b), c) => (a,b,c) }\n")),(0,n.kt)("h2",{id:"run-it-in-the-browser"},"Run it in the browser"),(0,n.kt)("h3",{id:"part-1"},"Part 1"),(0,n.kt)(r.Z,{puzzle:"day25-part1",year:"2021",mdxType:"Solver"}),(0,n.kt)("h2",{id:"run-it-locally"},"Run it locally"),(0,n.kt)("p",null,"You can get this solution locally by cloning the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/scalacenter/scala-advent-of-code"},"scalacenter/scala-advent-of-code")," repository."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"$ git clone https://github.com/scalacenter/scala-advent-of-code\n$ cd scala-advent-of-code\n")),(0,n.kt)("p",null,"You can run it with ",(0,n.kt)("a",{parentName:"p",href:"https://scala-cli.virtuslab.org/"},"scala-cli"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"$ scala-cli 2021 -M day25.part1\nThe answer is: 435\n")),(0,n.kt)("p",null,"You can replace the content of the ",(0,n.kt)("inlineCode",{parentName:"p"},"input/day25")," file with your own input from ",(0,n.kt)("a",{parentName:"p",href:"https://adventofcode.com/2021/day/25"},"adventofcode.com")," to get your own solution."),(0,n.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/FlorianCassayre/AdventOfCode-2021/blob/master/src/main/scala/adventofcode/solutions/Day25.scala"},"Solution")," of ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/FlorianCassayre"},"@FlorianCassayre"),".")),(0,n.kt)("p",null,"Share your solution to the Scala community by editing this page. (You can even write the whole article!)"))}p.isMDXComponent=!0}}]);