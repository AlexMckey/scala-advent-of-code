"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2888],{878:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>r,contentTitle:()=>p,default:()=>c,frontMatter:()=>m,metadata:()=>i,toc:()=>l});var n=t(7462),s=(t(7294),t(3905));t(6340);const m={},p="Day 6: Wait For It",i={unversionedId:"2023/puzzles/day06",id:"2023/puzzles/day06",title:"Day 6: Wait For It",description:"by Spamegg",source:"@site/target/mdoc/2023/puzzles/day06.md",sourceDirName:"2023/puzzles",slug:"/2023/puzzles/day06",permalink:"/scala-advent-of-code/2023/puzzles/day06",draft:!1,editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/2023/puzzles/day06.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 5: If You Give A Seed A Fertilizer",permalink:"/scala-advent-of-code/2023/puzzles/day05"},next:{title:"Day 1: Calorie Counting",permalink:"/scala-advent-of-code/2022/puzzles/day01"}},r={},l=[{value:"Puzzle description",id:"puzzle-description",level:2},{value:"Solution summary",id:"solution-summary",level:2},{value:"Solving the quadratic",id:"solving-the-quadratic",level:3},{value:"Counting the integers between the roots",id:"counting-the-integers-between-the-roots",level:3},{value:"Edge cases",id:"edge-cases",level:4},{value:"Parsing the input",id:"parsing-the-input",level:3},{value:"Final code",id:"final-code",level:3},{value:"Solutions from the community",id:"solutions-from-the-community",level:2}],o={toc:l};function c(e){let{components:a,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},o,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"day-6-wait-for-it"},"Day 6: Wait For It"),(0,s.kt)("p",null,"by ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/spamegg1/"},"Spamegg")),(0,s.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://adventofcode.com/2023/day/6"},"https://adventofcode.com/2023/day/6")),(0,s.kt)("h2",{id:"solution-summary"},"Solution summary"),(0,s.kt)("p",null,"We are given a time value, ",(0,s.kt)("inlineCode",{parentName:"p"},"t"),", and a distance record, ",(0,s.kt)("inlineCode",{parentName:"p"},"d"),".\nSay, we hold down the button for ",(0,s.kt)("inlineCode",{parentName:"p"},"x")," milliseconds. This determines our speed.\nThen our boat travels for ",(0,s.kt)("inlineCode",{parentName:"p"},"t-x")," seconds.\nSo our total distance traveled is: ",(0,s.kt)("inlineCode",{parentName:"p"},"x * (t-x)"),".\nWe need this to beat the current record ",(0,s.kt)("inlineCode",{parentName:"p"},"d"),".\nSo we need to solve the inequality ",(0,s.kt)("inlineCode",{parentName:"p"},"x * (t-x) > d")," for integer solutions."),(0,s.kt)("h3",{id:"solving-the-quadratic"},"Solving the quadratic"),(0,s.kt)("p",null,"Doing some algebra we obtain ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"x"),(0,s.kt)("mn",{parentName:"msup"},"2")),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow"},"x"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mo",{parentName:"mrow"},"<"),(0,s.kt)("mn",{parentName:"mrow"},"0")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x^2 - tx + d < 0")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.897438em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141079999999999em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.69841em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.73354em",verticalAlign:"-0.0391em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0"))))),".\nThis is a familiar U-shaped parabola.\nIt is negative for all the values between its two roots.\nThe roots are given by ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"x"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mfrac",{parentName:"mrow"},(0,s.kt)("mrow",{parentName:"mfrac"},(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mo",{parentName:"mrow"},"\xb1"),(0,s.kt)("msqrt",{parentName:"mrow"},(0,s.kt)("mrow",{parentName:"msqrt"},(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"t"),(0,s.kt)("mn",{parentName:"msup"},"2")),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"4"),(0,s.kt)("mi",{parentName:"mrow"},"d")))),(0,s.kt)("mn",{parentName:"mfrac"},"2"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x = \\frac{t \\pm \\sqrt{t^2 - 4d}}{2}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.384482em",verticalAlign:"-0.345em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mopen nulldelimiter"}),(0,s.kt)("span",{parentName:"span",className:"mfrac"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.039482em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.6550000000000002em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",style:{top:"-3.23em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"frac-line",style:{borderBottomWidth:"0.04em"}})),(0,s.kt)("span",{parentName:"span",style:{top:"-3.3939999999999997em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t"),(0,s.kt)("span",{parentName:"span",className:"mbin mtight"},"\xb1"),(0,s.kt)("span",{parentName:"span",className:"mord sqrt mtight"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.9221171428571429em"}},(0,s.kt)("span",{parentName:"span",className:"svg-align",style:{top:"-3em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mtight",style:{paddingLeft:"0.833em"}},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.7463142857142857em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.786em",marginRight:"0.07142857142857144em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.5em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size3 size1 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))))))),(0,s.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"4"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"d"))),(0,s.kt)("span",{parentName:"span",style:{top:"-2.882117142857143em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"hide-tail mtight",style:{minWidth:"0.853em",height:"1.08em"}},(0,s.kt)("svg",{parentName:"span",width:"400em",height:"1.08em",viewBox:"0 0 400000 1080",preserveAspectRatio:"xMinYMin slice"},(0,s.kt)("path",{parentName:"svg",d:"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z"}))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.11788285714285718em"}},(0,s.kt)("span",{parentName:"span"}))))))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.345em"}},(0,s.kt)("span",{parentName:"span"}))))),(0,s.kt)("span",{parentName:"span",className:"mclose nulldelimiter"})))))),".\nWe can find the roots as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"val disc = math.sqrt(t * t - 4 * d)\nval root1 = t / 2 - disc / 2\nval root2 = t / 2 + disc / 2\n")),(0,s.kt)("h3",{id:"counting-the-integers-between-the-roots"},"Counting the integers between the roots"),(0,s.kt)("p",null,"The idea is to take the ceiling of the smaller root, the floor of the larger root, then count the integers in this closed interval:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"root2.floor - root1.ceil + 1\n")),(0,s.kt)("h4",{id:"edge-cases"},"Edge cases"),(0,s.kt)("p",null,"In one of the given test cases with ",(0,s.kt)("inlineCode",{parentName:"p"},"t = 30")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"d = 200")," both roots happen to be integers themselves: ",(0,s.kt)("inlineCode",{parentName:"p"},"x1 = 10")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"x2 = 20"),"."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://github.com/spamegg1/scala-advent-of-code/assets/4255997/ca217ccf-ff92-48c2-95e4-fe424579d220",alt:"quad"})),(0,s.kt)("p",null,"In this case, the valid solutions are the integers 11, 12, 13, 14, 15, 16, 17, 18 and 19, excluding the roots themselves.\nSo we have to check if either root is an integer itself, and if so, exclude it. Because the roots give us equality ",(0,s.kt)("inlineCode",{parentName:"p"},"x * (t-x) = d"),".\nFor the lower endpoint of the interval, we'd have to increase it by 1, and for the upper endpoint we'd have to decrease it by 1."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"// are the roots integers themselves?\nval int1 = root1.ceil.toLong\nval endPt1 = if int1 == root1 then int1 + 1L else int1\nval int2 = root2.floor.toLong\nval endPt2 = if int2 == root2 then int2 - 1L else int2\n")),(0,s.kt)("h3",{id:"parsing-the-input"},"Parsing the input"),(0,s.kt)("p",null,"Part 2 deals with large numbers, so we'll have to use ",(0,s.kt)("inlineCode",{parentName:"p"},"Long"),"."),(0,s.kt)("p",null,"For part 1, we can parse both lines (times and distances) to sequences of ",(0,s.kt)("inlineCode",{parentName:"p"},"Long"),", then zip them."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'// input looks like: Time:        61     67     75     71\n// we want: 61, 67, 75, 71\ndef parse1(line: String) = line match\n  case s"Time: $x" => x.split(" ").filter(_.nonEmpty).map(_.toLong)\n  case s"Distance: $x" => x.split(" ").filter(_.nonEmpty).map(_.toLong)\n')),(0,s.kt)("p",null,"For part 2, we can filter out the space characters to obtain one ",(0,s.kt)("inlineCode",{parentName:"p"},"Long")," value from each line."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'// input looks like: Time:        61     67     75     71\n// we want: 61677571\ndef parse2(line: String) = line match\n  case s"Time: $x" => x.filterNot(_.isSpaceChar).toLong\n  case s"Distance: $x" => x.filterNot(_.isSpaceChar).toLong\n')),(0,s.kt)("p",null,"The input is given in two lines, one for times and one for distances. We can split them with ",(0,s.kt)("inlineCode",{parentName:"p"},'.split("\\n")'),"."),(0,s.kt)("h3",{id:"final-code"},"Final code"),(0,s.kt)("p",null,"Remember that for part 1, we need to multiply the individual results!"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'def parse1(line: String) = line match\n  case s"Time: $x" => x.split(" ").filter(_.nonEmpty).map(_.toLong)\n  case s"Distance: $x" => x.split(" ").filter(_.nonEmpty).map(_.toLong)\n\ndef parse2(line: String) = line match\n  case s"Time: $x" => x.filterNot(_.isSpaceChar).toLong\n  case s"Distance: $x" => x.filterNot(_.isSpaceChar).toLong\n\ndef solve(time: Long, distance: Long): Long =\n  val (t, d) = (time.toDouble, distance.toDouble)\n  val (root1, root2) = (t / 2 - disc / 2, t / 2 + disc / 2)\n\n  val int1 = root1.ceil.toLong\n  val endPt1 = if int1 == root1 then int1 + 1L else int1\n\n  val int2 = root2.floor.toLong\n  val endPt2 = if int2 == root2 then int2 - 1L else int2\n\n  endPt2 - endPt1 + 1L\n\ndef part1(input: String): Long =\n  val lines = input.split("\\n")\n  val (times, distances) = (parse1(lines(0)), parse1(lines(1)))\n  val solutions = times.zip(distances).map((t, d) => solve(t, d))\n  solutions.product\nend part1\n\ndef part2(input: String): Long =\n  val lines = input.split("\\n")\n  val (time, distance) = (parse2(lines(0)), parse2(lines(1)))\n  solve(time, distance)\nend part2\n')),(0,s.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/spamegg1/advent-of-code-2023-scala/blob/solutions/06.worksheet.sc#L112"},"Solution")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/spamegg1/"},"Spamegg")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/GrigoriiBerezin/advent_code_2023/tree/master/task06/src/main/scala"},"Solution")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/GrigoriiBerezin"},"g.berezin")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/Philippus/adventofcode/blob/main/src/main/scala/adventofcode2023/Day06.scala"},"Solution")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/philippus"},"Philippus Baalman")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/lenguyenthanh/aoc-2023/blob/main/Day06.scala"},"Solution")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/lenguyenthanh"},"Thanh Le")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/mpilquist/aoc/blob/main/2023/day6.sc"},"Solution")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/mpilquist"},"Michael Pilquist")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/alexandru/advent-of-code/blob/main/scala3/2023/src/main/scala/day6.scala"},"Solution (brute-force)")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/alexandru"},"Alexandru Nedelcu")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/radu-n-andrei/advent-2023/blob/main/src/main/scala/day6/Boats.scala"},"Solution (using math)")," by ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/radu-n-andrei"},"Radu Andrei"))),(0,s.kt)("p",null,"Share your solution to the Scala community by editing this page. (You can even write the whole article!)"))}c.isMDXComponent=!0}}]);