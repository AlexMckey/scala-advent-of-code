"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3414],{731:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=n(7462),i=(n(7294),n(3905)),o=n(6340);const r={},l="Day 11: Monkey in the Middle",s={unversionedId:"2022/puzzles/day11",id:"2022/puzzles/day11",title:"Day 11: Monkey in the Middle",description:"Puzzle description",source:"@site/target/mdoc/2022/puzzles/day11.md",sourceDirName:"2022/puzzles",slug:"/2022/puzzles/day11",permalink:"/scala-advent-of-code/2022/puzzles/day11",draft:!1,editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/2022/puzzles/day11.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 10: Cathode-Ray Tube",permalink:"/scala-advent-of-code/2022/puzzles/day10"},next:{title:"Day 12: Hill Climbing Algorithm",permalink:"/scala-advent-of-code/2022/puzzles/day12"}},d={},m=[{value:"Puzzle description",id:"puzzle-description",level:2},{value:"Final Code",id:"final-code",level:2},{value:"Run it in the browser",id:"run-it-in-the-browser",level:3},{value:"Part 1",id:"part-1",level:4},{value:"Part 2",id:"part-2",level:4},{value:"Solutions from the community",id:"solutions-from-the-community",level:2}],p={toc:m};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"day-11-monkey-in-the-middle"},"Day 11: Monkey in the Middle"),(0,i.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://adventofcode.com/2022/day/11"},"https://adventofcode.com/2022/day/11")),(0,i.kt)("h2",{id:"final-code"},"Final Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import scala.collection.immutable.Queue\n\ndef part1(input: String): Long =\n  run(initial = parseInput(input), times = 20, adjust = _ / 3)\n\ndef part2(input: String): Long =\n  run(initial = parseInput(input), times = 10_000, adjust = identity)\n\ntype Worry = Long\ntype Op = Worry => Worry\ntype Monkeys = IndexedSeq[Monkey]\n\ncase class Monkey(\n  items: Queue[Worry],\n  divisibleBy: Int,\n  ifTrue: Int,\n  ifFalse: Int,\n  op: Op,\n  inspected: Int\n)\n\ndef iterate[Z](times: Int)(op: Z => Z)(z: Z): Z =\n  (0 until times).foldLeft(z) { (z, _) => op(z) }\n\ndef run(initial: Monkeys, times: Int, adjust: Op): Long =\n  val lcm = initial.map(_.divisibleBy.toLong).product\n  val monkeys = iterate(times)(round(adjust, lcm))(initial)\n  monkeys.map(_.inspected.toLong).sorted.reverseIterator.take(2).product\n\ndef round(adjust: Op, lcm: Worry)(monkeys: Monkeys): Monkeys =\n  monkeys.indices.foldLeft(monkeys) { (monkeys, index) =>\n    turn(index, monkeys, adjust, lcm)\n  }\n\ndef turn(index: Int, monkeys: Monkeys, adjust: Op, lcm: Worry): Monkeys =\n  val monkey = monkeys(index)\n  val Monkey(items, divisibleBy, ifTrue, ifFalse, op, inspected) = monkey\n\n  val monkeys1 = items.foldLeft(monkeys) { (monkeys, item) =>\n    val inspected = op(item)\n    val nextWorry = adjust(inspected) % lcm\n    val thrownTo =\n      if nextWorry % divisibleBy == 0 then ifTrue\n      else ifFalse\n    val thrownToMonkey =\n      val m = monkeys(thrownTo)\n      m.copy(items = m.items :+ nextWorry)\n    monkeys.updated(thrownTo, thrownToMonkey)\n  }\n  val monkey1 = monkey.copy(\n    items = Queue.empty,\n    inspected = inspected + items.size\n  )\n  monkeys1.updated(index, monkey1)\nend turn\n\ndef parseInput(input: String): Monkeys =\n\n  def eval(by: String): Op =\n    if by == "old" then identity\n    else Function.const(by.toInt)\n\n  def parseOperator(op: String, left: Op, right: Op): Op =\n    op match\n      case "+" => old => left(old) + right(old)\n      case "*" => old => left(old) * right(old)\n\n  IArray.from(\n    for\n      case Seq(\n        s"Monkey $n:",\n        s"  Starting items: $items",\n        s"  Operation: new = $left $operator $right",\n        s"  Test: divisible by $div",\n        s"    If true: throw to monkey $ifTrue",\n        s"    If false: throw to monkey $ifFalse",\n        _*\n      ) <- input.linesIterator.grouped(7)\n    yield\n      val op = parseOperator(operator, eval(left), eval(right))\n      val itemsQueue = items.split(", ").map(_.toLong).to(Queue)\n      Monkey(itemsQueue, div.toInt, ifTrue.toInt, ifFalse.toInt, op, inspected = 0)\n  )\nend parseInput\n')),(0,i.kt)("h3",{id:"run-it-in-the-browser"},"Run it in the browser"),(0,i.kt)("h4",{id:"part-1"},"Part 1"),(0,i.kt)(o.Z,{puzzle:"day11-part1",year:"2022",mdxType:"Solver"}),(0,i.kt)("h4",{id:"part-2"},"Part 2"),(0,i.kt)(o.Z,{puzzle:"day11-part2",year:"2022",mdxType:"Solver"}),(0,i.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Jannyboy11/AdventOfCode2022/blob/master/src/main/scala/day11/Day11.scala"},"Solution")," of ",(0,i.kt)("a",{parentName:"li",href:"https://twitter.com/JanBoerman95"},"Jan Boerman"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/SethTisue/adventofcode/blob/main/2022/src/test/scala/Day11.scala"},"Solution")," of ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/SethTisue"},"Seth Tisue")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/cosminci/advent-of-code/blob/master/src/main/scala/com/github/cosminci/aoc/_2022/Day11.scala"},"Solution")," by Cosmin Ciobanu"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/TheDrawingCoder-Gamer/adventofcode2022/blob/master/src/main/scala/Day11.worksheet.sc"},"Solution")," by Bulby"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/prinsniels/AdventOfCode2022/blob/master/src/main/scala/day11.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/prinsniels"},"Niels Prins")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erikvanoosten/advent-of-code/blob/main/src/main/scala/nl/grons/advent/y2022/Day11.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/erikvanoosten"},"Erik van Oosten")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/danielnaumau/code-advent-2022/blob/master/src/main/scala/com/adventofcode/Day11.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/danielnaumau"},"Daniel Naumau")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/AvaPL/Advent-of-Code-2022/tree/main/src/main/scala/day11"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/AvaPL"},"Pawe\u0142 Cembaluk")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/w-r-z-k/aoc2022/blob/main/src/main/scala/Day11.scala"},"Solution")," by Richard W")),(0,i.kt)("p",null,"Share your solution to the Scala community by editing this page."))}u.isMDXComponent=!0}}]);