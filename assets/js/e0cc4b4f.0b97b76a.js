"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2288],{8352:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(7462),i=(a(7294),a(3905));a(6340);const o={},s="Day 14: Regolith Reservoir",l={unversionedId:"2022/puzzles/day14",id:"2022/puzzles/day14",title:"Day 14: Regolith Reservoir",description:"Puzzle description",source:"@site/target/mdoc/2022/puzzles/day14.md",sourceDirName:"2022/puzzles",slug:"/2022/puzzles/day14",permalink:"/scala-advent-of-code/2022/puzzles/day14",draft:!1,editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/2022/puzzles/day14.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 13: Distress Signal",permalink:"/scala-advent-of-code/2022/puzzles/day13"},next:{title:"Day 15: Beacon Exclusion Zone",permalink:"/scala-advent-of-code/2022/puzzles/day15"}},r={},c=[{value:"Puzzle description",id:"puzzle-description",level:2},{value:"Final Solution",id:"final-solution",level:2},{value:"Solutions from the community",id:"solutions-from-the-community",level:2}],p={toc:c};function d(t){let{components:e,...a}=t;return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"day-14-regolith-reservoir"},"Day 14: Regolith Reservoir"),(0,i.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://adventofcode.com/2022/day/14"},"https://adventofcode.com/2022/day/14")),(0,i.kt)("h2",{id:"final-solution"},"Final Solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'def part1(input: String): Int =\n  val search = parseInput(input)\n  search.states\n    .takeWhile(_.fallingPath.head.y < search.lowestRock)\n    .last\n    .sand\n    .size\n\ndef part2(input: String): Int =\n  parseInput(input).states.last.sand.size\n\ndef parseInput(input: String): Scan =\n  val paths = input.linesIterator\n    .map { line =>\n      line.split(" -> ").map { case s"$x,$y" => Point(x.toInt, y.toInt) }.toList\n    }\n  val rocks = paths.flatMap { path =>\n    path.sliding(2).flatMap {\n      case List(p1, p2) =>\n        val dx = p2.x - p1.x\n        val dy = p2.y - p1.y\n\n        if dx == 0 then (p1.y to p2.y by dy.sign).map(Point(p1.x, _))\n        else (p1.x to p2.x by dx.sign).map(Point(_, p1.y))\n      case _ => None\n    }\n  }.toSet\n  Scan(rocks)\n\ncase class Point(x: Int, y: Int)\n\ncase class Scan(rocks: Set[Point]):\n  val lowestRock = rocks.map(_.y).max\n  val floor = lowestRock + 2\n\n  case class State(fallingPath: List[Point], sand: Set[Point]):\n    def isFree(p: Point) = !sand(p) && !rocks(p)\n\n    def next: Option[State] = fallingPath.headOption.map {\n      case sandUnit @ Point(x, y) =>\n        val down = Some(Point(x, y + 1)).filter(isFree)\n        val downLeft = Some(Point(x - 1, y + 1)).filter(isFree)\n        val downRight = Some(Point(x + 1, y + 1)).filter(isFree)\n\n        down.orElse(downLeft).orElse(downRight).filter(_.y < floor) match\n          case Some(fallingPos) =>\n            State(fallingPos :: fallingPath, sand)\n          case None =>\n            State(fallingPath.tail, sand + sandUnit)\n    }\n\n  def states: LazyList[State] =\n    val source = Point(500, 0)\n    LazyList.unfold(State(List(source), Set.empty)) { _.next.map(s => s -> s) }\nend Scan\n')),(0,i.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erikvanoosten/advent-of-code/blob/main/src/main/scala/nl/grons/advent/y2022/Day14.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/erikvanoosten"},"Erik van Oosten")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/cosminci/advent-of-code/blob/master/src/main/scala/com/github/cosminci/aoc/_2022/Day14.scala"},"Solution")," by Cosmin Ciobanu"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/AvaPL/Advent-of-Code-2022/tree/main/src/main/scala/day14"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/AvaPL"},"Pawe\u0142 Cembaluk")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/w-r-z-k/aoc2022/blob/main/src/main/scala/Day14.scala"},"Solution")," by Richard W."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/xRuiAlves/advent-of-code-2022/tree/main/src/main/scala/rui/aoc/year2022/day14"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/xRuiAlves/"},"Rui Alves"))),(0,i.kt)("p",null,"Share your solution to the Scala community by editing this page.\nYou can even write the whole article! ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/scalacenter/scala-advent-of-code/discussions/424"},"See here for the expected format")))}d.isMDXComponent=!0}}]);