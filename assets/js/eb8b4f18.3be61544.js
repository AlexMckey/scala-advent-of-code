"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1602],{1885:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294);const l=e=>{let{children:t}=e;const n=()=>a.Children.map(t,(e=>{const t=void 0===e.props.className?"literate-coding":`${e.props.className} literate-coding`;return a.cloneElement(e,{className:t})}));return a.createElement(n,null)}},8755:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>p,default:()=>u,frontMatter:()=>d,metadata:()=>h,toc:()=>x});var a=n(7462),l=n(7294),i=n(3905),r=(n(6340),n(1885));const o=e=>{let{children:t}=e;const n=()=>l.Children.map(t,(e=>l.createElement("div",{className:"image-container-175mw"},e)));return l.createElement(n,null)};var s;function c(){return c=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},c.apply(this,arguments)}const m=e=>{let{title:t,titleId:n,...a}=e;return l.createElement("svg",c({xmlns:"http://www.w3.org/2000/svg",width:504,height:1480,viewBox:"0 0 378 1109.6","aria-labelledby":n},a),t?l.createElement("title",{id:n},t):null,s||(s=l.createElement("g",{className:"graph",transform:"translate(4 1105.6)"},l.createElement("title",null,"G"),l.createElement("path",{fill:"#fff",stroke:"transparent",d:"M-4 4v-1109.6h378V4H-4z"}),l.createElement("g",{className:"node"},l.createElement("title",null,"0"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:195,cy:-1083.6,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:195,y:-1079.4,fontFamily:"Times,serif",fontSize:14},"0")),l.createElement("g",{className:"node"},l.createElement("title",null,"1"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:195,cy:-994.8,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:195,y:-990.6,fontFamily:"Times,serif",fontSize:14},"1")),l.createElement("g",{className:"edge"},l.createElement("title",null,"0->1"),l.createElement("path",{fill:"none",stroke:"#000",d:"M195-1065.2v41.933"}),l.createElement("path",{stroke:"#000",d:"m198.5-1022.872-3.5 10-3.5-10h7z"}),l.createElement("text",{textAnchor:"middle",x:205.5,y:-1035,fontFamily:"Times,serif",fontSize:14},"159")),l.createElement("g",{className:"node"},l.createElement("title",null,"3"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:159,cy:-906,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:159,y:-901.8,fontFamily:"Times,serif",fontSize:14},"3")),l.createElement("g",{className:"edge"},l.createElement("title",null,"1->3"),l.createElement("path",{fill:"none",stroke:"#000",d:"M187.888-977.256 169.91-932.91"}),l.createElement("path",{stroke:"#000",d:"m173.098-931.46-7 7.952.513-10.582 6.487 2.63z"}),l.createElement("text",{textAnchor:"middle",x:190.5,y:-946.2,fontFamily:"Times,serif",fontSize:14},"138")),l.createElement("g",{className:"node"},l.createElement("title",null,"2"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:231,cy:-906,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:231,y:-901.8,fontFamily:"Times,serif",fontSize:14},"2")),l.createElement("g",{className:"edge"},l.createElement("title",null,"1->2"),l.createElement("path",{fill:"none",stroke:"#000",d:"m202.112-977.256 17.978 44.346"}),l.createElement("path",{stroke:"#000",d:"m223.389-934.09.513 10.582-7-7.952 6.487-2.63z"}),l.createElement("text",{textAnchor:"middle",x:223,y:-946.2,fontFamily:"Times,serif",fontSize:14},"80")),l.createElement("g",{className:"node"},l.createElement("title",null,"4"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:190,cy:-817.2,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:190,y:-813,fontFamily:"Times,serif",fontSize:14},"4")),l.createElement("g",{className:"edge"},l.createElement("title",null,"3->4"),l.createElement("path",{fill:"none",stroke:"#000",d:"m165.125-888.456 15.238 43.65"}),l.createElement("path",{stroke:"#000",d:"m183.79-845.606-.008 10.595-6.6-8.288 6.609-2.307z"}),l.createElement("text",{textAnchor:"middle",x:185,y:-857.4,fontFamily:"Times,serif",fontSize:14},"72")),l.createElement("g",{className:"node"},l.createElement("title",null,"6"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:118,cy:-817.2,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:118,y:-813,fontFamily:"Times,serif",fontSize:14},"6")),l.createElement("g",{className:"edge"},l.createElement("title",null,"3->6"),l.createElement("path",{fill:"none",stroke:"#000",d:"m150.9-888.456-20.604 44.625"}),l.createElement("path",{stroke:"#000",d:"m133.314-842.017-7.37 7.612 1.014-10.547 6.356 2.935z"}),l.createElement("text",{textAnchor:"middle",x:153.5,y:-857.4,fontFamily:"Times,serif",fontSize:14},"334")),l.createElement("g",{className:"edge"},l.createElement("title",null,"2->4"),l.createElement("path",{fill:"none",stroke:"#000",d:"m222.9-888.456-20.604 44.625"}),l.createElement("path",{stroke:"#000",d:"m205.314-842.017-7.37 7.612 1.014-10.547 6.356 2.935z"}),l.createElement("text",{textAnchor:"middle",x:224.5,y:-857.4,fontFamily:"Times,serif",fontSize:14},"170")),l.createElement("g",{className:"node"},l.createElement("title",null,"5"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:262,cy:-817.2,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:262,y:-813,fontFamily:"Times,serif",fontSize:14},"5")),l.createElement("g",{className:"edge"},l.createElement("title",null,"2->5"),l.createElement("path",{fill:"none",stroke:"#000",d:"m237.125-888.456 15.238 43.65"}),l.createElement("path",{stroke:"#000",d:"m255.79-845.606-.008 10.595-6.6-8.288 6.609-2.307z"}),l.createElement("text",{textAnchor:"middle",x:259.5,y:-857.4,fontFamily:"Times,serif",fontSize:14},"310")),l.createElement("g",{className:"node"},l.createElement("title",null,"11"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:227,cy:-728.4,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:227,y:-724.2,fontFamily:"Times,serif",fontSize:14},"11")),l.createElement("g",{className:"edge"},l.createElement("title",null,"4->11"),l.createElement("path",{fill:"none",stroke:"#000",d:"m197.31-799.656 18.477 44.345"}),l.createElement("path",{stroke:"#000",d:"m219.09-756.485.615 10.577-7.077-7.884 6.462-2.692z"}),l.createElement("text",{textAnchor:"middle",x:221.5,y:-768.6,fontFamily:"Times,serif",fontSize:14},"232")),l.createElement("g",{className:"node"},l.createElement("title",null,"9"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:155,cy:-728.4,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:155,y:-724.2,fontFamily:"Times,serif",fontSize:14},"9")),l.createElement("g",{className:"edge"},l.createElement("title",null,"4->9"),l.createElement("path",{fill:"none",stroke:"#000",d:"M177.974-801.01c-3.978 5.977-8.113 12.967-10.974 19.81-3.263 7.806-5.715 16.649-7.523 24.835"}),l.createElement("path",{stroke:"#000",d:"m162.894-755.604-5.375 9.13-1.492-10.49 6.867 1.36z"}),l.createElement("text",{textAnchor:"middle",x:177.5,y:-768.6,fontFamily:"Times,serif",fontSize:14},"116")),l.createElement("g",{className:"edge"},l.createElement("title",null,"5->11"),l.createElement("path",{fill:"none",stroke:"#000",d:"m255.085-799.656-17.478 44.345"}),l.createElement("path",{stroke:"#000",d:"m240.824-753.928-6.924 8.02.411-10.587 6.513 2.567z"}),l.createElement("text",{textAnchor:"middle",x:257.5,y:-768.6,fontFamily:"Times,serif",fontSize:14},"184")),l.createElement("g",{className:"node"},l.createElement("title",null,"7"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:299,cy:-728.4,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:299,y:-724.2,fontFamily:"Times,serif",fontSize:14},"7")),l.createElement("g",{className:"edge"},l.createElement("title",null,"5->7"),l.createElement("path",{fill:"none",stroke:"#000",d:"m269.31-799.656 18.477 44.345"}),l.createElement("path",{stroke:"#000",d:"m291.09-756.485.615 10.577-7.077-7.884 6.462-2.692z"}),l.createElement("text",{textAnchor:"middle",x:293.5,y:-768.6,fontFamily:"Times,serif",fontSize:14},"112")),l.createElement("g",{className:"edge"},l.createElement("title",null,"6->9"),l.createElement("path",{fill:"none",stroke:"#000",d:"m125.31-799.656 18.477 44.345"}),l.createElement("path",{stroke:"#000",d:"m147.09-756.485.615 10.577-7.077-7.884 6.462-2.692z"}),l.createElement("text",{textAnchor:"middle",x:147,y:-768.6,fontFamily:"Times,serif",fontSize:14},"38")),l.createElement("g",{className:"node"},l.createElement("title",null,"8"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:83,cy:-728.4,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:83,y:-724.2,fontFamily:"Times,serif",fontSize:14},"8")),l.createElement("g",{className:"edge"},l.createElement("title",null,"6->8"),l.createElement("path",{fill:"none",stroke:"#000",d:"M103.788-801.77C98.993-795.757 94.08-788.55 91-781.2c-3.19 7.61-5.129 16.31-6.3 24.423"}),l.createElement("path",{stroke:"#000",d:"m88.15-756.14-4.59 9.548-2.367-10.327 6.957.779z"}),l.createElement("text",{textAnchor:"middle",x:98,y:-768.6,fontFamily:"Times,serif",fontSize:14},"44")),l.createElement("g",{className:"node"},l.createElement("title",null,"13"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:262,cy:-639.6,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:262,y:-635.4,fontFamily:"Times,serif",fontSize:14},"13")),l.createElement("g",{className:"edge"},l.createElement("title",null,"11->13"),l.createElement("path",{fill:"none",stroke:"#000",d:"m233.915-710.856 17.478 44.346"}),l.createElement("path",{stroke:"#000",d:"m254.689-667.694.41 10.586-6.923-8.02 6.513-2.566z"}),l.createElement("text",{textAnchor:"middle",x:254,y:-679.8,fontFamily:"Times,serif",fontSize:14},"74")),l.createElement("g",{className:"node"},l.createElement("title",null,"14"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:187,cy:-639.6,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:187,y:-635.4,fontFamily:"Times,serif",fontSize:14},"14")),l.createElement("g",{className:"edge"},l.createElement("title",null,"11->14"),l.createElement("path",{fill:"none",stroke:"#000",d:"m219.097-710.856-19.975 44.346"}),l.createElement("path",{stroke:"#000",d:"m202.185-664.788-7.299 7.68.916-10.555 6.383 2.875z"}),l.createElement("text",{textAnchor:"middle",x:217,y:-679.8,fontFamily:"Times,serif",fontSize:14},"72")),l.createElement("g",{className:"node"},l.createElement("title",null,"10"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:113,cy:-639.6,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:113,y:-635.4,fontFamily:"Times,serif",fontSize:14},"10")),l.createElement("g",{className:"edge"},l.createElement("title",null,"9->10"),l.createElement("path",{fill:"none",stroke:"#000",d:"m146.702-710.856-21.106 44.625"}),l.createElement("path",{stroke:"#000",d:"m128.577-664.349-7.44 7.544 1.112-10.537 6.328 2.993z"}),l.createElement("text",{textAnchor:"middle",x:145,y:-679.8,fontFamily:"Times,serif",fontSize:14},"20")),l.createElement("g",{className:"edge"},l.createElement("title",null,"9->14"),l.createElement("path",{fill:"none",stroke:"#000",d:"m161.322-710.856 15.83 43.93"}),l.createElement("path",{stroke:"#000",d:"m180.593-667.702.098 10.594-6.683-8.22 6.585-2.374z"}),l.createElement("text",{textAnchor:"middle",x:184.5,y:-679.8,fontFamily:"Times,serif",fontSize:14},"188")),l.createElement("g",{className:"node"},l.createElement("title",null,"12"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:335,cy:-639.6,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:335,y:-635.4,fontFamily:"Times,serif",fontSize:14},"12")),l.createElement("g",{className:"edge"},l.createElement("title",null,"7->12"),l.createElement("path",{fill:"none",stroke:"#000",d:"m306.112-710.856 17.978 44.346"}),l.createElement("path",{stroke:"#000",d:"m327.389-667.69.513 10.582-7-7.952 6.487-2.63z"}),l.createElement("text",{textAnchor:"middle",x:330.5,y:-679.8,fontFamily:"Times,serif",fontSize:14},"222")),l.createElement("g",{className:"edge"},l.createElement("title",null,"7->13"),l.createElement("path",{fill:"none",stroke:"#000",d:"m291.69-710.856-18.477 44.346"}),l.createElement("path",{stroke:"#000",d:"m276.372-664.992-7.077 7.884.615-10.577 6.462 2.693z"}),l.createElement("text",{textAnchor:"middle",x:290,y:-679.8,fontFamily:"Times,serif",fontSize:14},"66")),l.createElement("g",{className:"edge"},l.createElement("title",null,"8->10"),l.createElement("path",{fill:"none",stroke:"#000",d:"M84.452-710.39c1.234 10.403 3.484 23.603 7.548 34.79 1.286 3.54 2.918 7.13 4.701 10.602"}),l.createElement("path",{stroke:"#000",d:"m99.8-666.63 1.843 10.434-7.948-7.006 6.104-3.427z"}),l.createElement("text",{textAnchor:"middle",x:99,y:-679.8,fontFamily:"Times,serif",fontSize:14},"38")),l.createElement("g",{className:"node"},l.createElement("title",null,"15"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:27,cy:-639.6,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:27,y:-635.4,fontFamily:"Times,serif",fontSize:14},"15")),l.createElement("g",{className:"edge"},l.createElement("title",null,"8->15"),l.createElement("path",{fill:"none",stroke:"#000",d:"M72.467-711.697 43.03-665.02"}),l.createElement("path",{stroke:"#000",d:"m45.78-662.82-8.294 6.592 2.374-10.325 5.92 3.734z"}),l.createElement("text",{textAnchor:"middle",x:71.5,y:-679.8,fontFamily:"Times,serif",fontSize:14},"440")),l.createElement("g",{className:"node"},l.createElement("title",null,"18"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:305,cy:-550.8,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:305,y:-546.6,fontFamily:"Times,serif",fontSize:14},"18")),l.createElement("g",{className:"edge"},l.createElement("title",null,"12->18"),l.createElement("path",{fill:"none",stroke:"#000",d:"m328.93-621.63-14.689 43.476"}),l.createElement("path",{stroke:"#000",d:"m317.476-576.794-6.517 8.354-.115-10.594 6.632 2.24z"}),l.createElement("text",{textAnchor:"middle",x:332.5,y:-591,fontFamily:"Times,serif",fontSize:14},"144")),l.createElement("g",{className:"node"},l.createElement("title",null,"20"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:328,cy:-462,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:328,y:-457.8,fontFamily:"Times,serif",fontSize:14},"20")),l.createElement("g",{className:"edge"},l.createElement("title",null,"12->20"),l.createElement("path",{fill:"none",stroke:"#000",d:"M342.143-621.94c1.984 5.75 3.865 12.227 4.857 18.34 6.405 39.468-2.79 85.378-10.479 113.966"}),l.createElement("path",{stroke:"#000",d:"m339.868-488.606-6.08 8.677-.658-10.574 6.738 1.897z"}),l.createElement("text",{textAnchor:"middle",x:359.5,y:-546.6,fontFamily:"Times,serif",fontSize:14},"520")),l.createElement("g",{className:"edge"},l.createElement("title",null,"13->18"),l.createElement("path",{fill:"none",stroke:"#000",d:"m270.495-622.056 21.81 45.041"}),l.createElement("path",{stroke:"#000",d:"m295.46-578.531 1.209 10.526-7.509-7.475 6.3-3.051z"}),l.createElement("text",{textAnchor:"middle",x:297.5,y:-591,fontFamily:"Times,serif",fontSize:14},"140")),l.createElement("g",{className:"node"},l.createElement("title",null,"17"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:231,cy:-550.8,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:231,y:-546.6,fontFamily:"Times,serif",fontSize:14},"17")),l.createElement("g",{className:"edge"},l.createElement("title",null,"13->17"),l.createElement("path",{fill:"none",stroke:"#000",d:"M254.954-622.1c-2.293 5.854-4.8 12.433-6.954 18.5-2.932 8.258-5.928 17.317-8.571 25.564"}),l.createElement("path",{stroke:"#000",d:"m242.76-576.966-6.353 8.478-.32-10.59 6.674 2.112z"}),l.createElement("text",{textAnchor:"middle",x:258.5,y:-591,fontFamily:"Times,serif",fontSize:14},"202")),l.createElement("g",{className:"node"},l.createElement("title",null,"16"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:156,cy:-550.8,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:156,y:-546.6,fontFamily:"Times,serif",fontSize:14},"16")),l.createElement("g",{className:"edge"},l.createElement("title",null,"10->16"),l.createElement("path",{fill:"none",stroke:"#000",d:"M118.292-621.552c3.347 10.416 8.097 23.616 13.708 34.752 1.848 3.669 4.002 7.413 6.247 11.032"}),l.createElement("path",{stroke:"#000",d:"m141.346-577.424 2.544 10.285-8.402-6.453 5.858-3.832z"}),l.createElement("text",{textAnchor:"middle",x:142.5,y:-591,fontFamily:"Times,serif",fontSize:14},"120")),l.createElement("g",{className:"node"},l.createElement("title",null,"19"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:68,cy:-550.8,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:68,y:-546.6,fontFamily:"Times,serif",fontSize:14},"19")),l.createElement("g",{className:"edge"},l.createElement("title",null,"10->19"),l.createElement("path",{fill:"none",stroke:"#000",d:"m104.323-622.479-23.06 45.506"}),l.createElement("path",{stroke:"#000",d:"m84.292-575.207-7.642 7.338 1.398-10.502 6.244 3.164z"}),l.createElement("text",{textAnchor:"middle",x:105.5,y:-591,fontFamily:"Times,serif",fontSize:14},"222")),l.createElement("g",{className:"edge"},l.createElement("title",null,"15->19"),l.createElement("path",{fill:"none",stroke:"#000",d:"M23.89-621.698c-1.022 10.61-.842 24.057 4.11 34.898 2.802 6.135 7.204 11.672 12.082 16.461"}),l.createElement("path",{stroke:"#000",d:"m42.742-572.662 5.233 9.212-9.835-3.938 4.602-5.274z"}),l.createElement("text",{textAnchor:"middle",x:38.5,y:-591,fontFamily:"Times,serif",fontSize:14},"184")),l.createElement("g",{className:"node"},l.createElement("title",null,"22"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:27,cy:-462,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:27,y:-457.8,fontFamily:"Times,serif",fontSize:14},"22")),l.createElement("g",{className:"edge"},l.createElement("title",null,"15->22"),l.createElement("path",{fill:"none",stroke:"#000",d:"M21.806-621.746C17.957-607.542 13.04-587.085 11-568.8c-1.774 15.901-1.774 20.099 0 36 1.61 14.428 5.011 30.208 8.265 43.202"}),l.createElement("path",{stroke:"#000",d:"m22.67-490.414-.864 10.56-5.91-8.793 6.774-1.767z"}),l.createElement("text",{textAnchor:"middle",x:21.5,y:-546.6,fontFamily:"Times,serif",fontSize:14},"472")),l.createElement("g",{className:"edge"},l.createElement("title",null,"14->16"),l.createElement("path",{fill:"none",stroke:"#000",d:"M172.487-624.289c-4.827 6-9.683 13.23-12.487 20.689-2.879 7.659-4.24 16.374-4.79 24.485"}),l.createElement("path",{stroke:"#000",d:"m158.703-578.826-3.808 9.887-3.188-10.104 6.996.217z"}),l.createElement("text",{textAnchor:"middle",x:170.5,y:-591,fontFamily:"Times,serif",fontSize:14},"196")),l.createElement("g",{className:"edge"},l.createElement("title",null,"14->17"),l.createElement("path",{fill:"none",stroke:"#000",d:"m195.484-622.479 22.407 45.223"}),l.createElement("path",{stroke:"#000",d:"m221.089-578.686 1.303 10.514-7.576-7.406 6.273-3.108z"}),l.createElement("text",{textAnchor:"middle",x:222.5,y:-591,fontFamily:"Times,serif",fontSize:14},"152")),l.createElement("g",{className:"node"},l.createElement("title",null,"23"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:102,cy:-462,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:102,y:-457.8,fontFamily:"Times,serif",fontSize:14},"23")),l.createElement("g",{className:"edge"},l.createElement("title",null,"16->23"),l.createElement("path",{fill:"none",stroke:"#000",d:"m145.843-534.097-28.211 46.392"}),l.createElement("path",{stroke:"#000",d:"m120.481-485.655-8.186 6.725 2.205-10.362 5.981 3.637z"}),l.createElement("text",{textAnchor:"middle",x:141,y:-502.2,fontFamily:"Times,serif",fontSize:14},"94")),l.createElement("g",{className:"node"},l.createElement("title",null,"21"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:179,cy:-462,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:179,y:-457.8,fontFamily:"Times,serif",fontSize:14},"21")),l.createElement("g",{className:"edge"},l.createElement("title",null,"16->21"),l.createElement("path",{fill:"none",stroke:"#000",d:"M155.565-532.392c.208 10.297 1.227 23.262 4.435 34.392.989 3.431 2.328 6.91 3.84 10.286"}),l.createElement("path",{stroke:"#000",d:"m167.053-489.115 1.36 10.508-7.615-7.366 6.255-3.142z"}),l.createElement("text",{textAnchor:"middle",x:170.5,y:-502.2,fontFamily:"Times,serif",fontSize:14},"198")),l.createElement("g",{className:"edge"},l.createElement("title",null,"19->22"),l.createElement("path",{fill:"none",stroke:"#000",d:"m59.9-533.256-20.604 44.625"}),l.createElement("path",{stroke:"#000",d:"m42.313-486.817-7.37 7.612 1.015-10.547 6.355 2.935z"}),l.createElement("text",{textAnchor:"middle",x:59,y:-502.2,fontFamily:"Times,serif",fontSize:14},"60")),l.createElement("g",{className:"edge"},l.createElement("title",null,"19->23"),l.createElement("path",{fill:"none",stroke:"#000",d:"M71.099-532.8c2.116 10.4 5.366 23.6 9.901 34.8 1.414 3.492 3.121 7.052 4.944 10.509"}),l.createElement("path",{stroke:"#000",d:"m89.04-489.128 1.877 10.427-7.97-6.98 6.092-3.447z"}),l.createElement("text",{textAnchor:"middle",x:88,y:-502.2,fontFamily:"Times,serif",fontSize:14},"40")),l.createElement("g",{className:"edge"},l.createElement("title",null,"18->20"),l.createElement("path",{fill:"none",stroke:"#000",d:"m309.654-532.83 11.19 43.199"}),l.createElement("path",{stroke:"#000",d:"m324.233-490.501-.88 10.558-5.896-8.803 6.776-1.755z"}),l.createElement("text",{textAnchor:"middle",x:325,y:-502.2,fontFamily:"Times,serif",fontSize:14},"60")),l.createElement("g",{className:"node"},l.createElement("title",null,"24"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:254,cy:-462,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:254,y:-457.8,fontFamily:"Times,serif",fontSize:14},"24")),l.createElement("g",{className:"edge"},l.createElement("title",null,"18->24"),l.createElement("path",{fill:"none",stroke:"#000",d:"M295.167-533.678c-7.48 13.021-17.893 31.154-26.376 45.923"}),l.createElement("path",{stroke:"#000",d:"m271.818-485.998-8.015 6.929 1.945-10.415 6.07 3.486z"}),l.createElement("text",{textAnchor:"middle",x:294.5,y:-502.2,fontFamily:"Times,serif",fontSize:14},"146")),l.createElement("g",{className:"node"},l.createElement("title",null,"28"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:285,cy:-373.2,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:285,y:-369,fontFamily:"Times,serif",fontSize:14},"28")),l.createElement("g",{className:"edge"},l.createElement("title",null,"20->28"),l.createElement("path",{fill:"none",stroke:"#000",d:"m319.505-444.456-21.81 45.041"}),l.createElement("path",{stroke:"#000",d:"m300.84-397.88-7.508 7.475 1.208-10.526 6.3 3.05z"}),l.createElement("text",{textAnchor:"middle",x:320.5,y:-413.4,fontFamily:"Times,serif",fontSize:14},"280")),l.createElement("g",{className:"edge"},l.createElement("title",null,"17->21"),l.createElement("path",{fill:"none",stroke:"#000",d:"m220.974-533.678-27.059 46.207"}),l.createElement("path",{stroke:"#000",d:"m196.893-485.628-8.074 6.86 2.033-10.398 6.04 3.538z"}),l.createElement("text",{textAnchor:"middle",x:219.5,y:-502.2,fontFamily:"Times,serif",fontSize:14},"102")),l.createElement("g",{className:"edge"},l.createElement("title",null,"17->24"),l.createElement("path",{fill:"none",stroke:"#000",d:"m235.654-532.83 11.19 43.199"}),l.createElement("path",{stroke:"#000",d:"m250.233-490.501-.88 10.558-5.896-8.803 6.776-1.755z"}),l.createElement("text",{textAnchor:"middle",x:251,y:-502.2,fontFamily:"Times,serif",fontSize:14},"56")),l.createElement("g",{className:"node"},l.createElement("title",null,"25"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:69,cy:-373.2,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:69,y:-369,fontFamily:"Times,serif",fontSize:14},"25")),l.createElement("g",{className:"edge"},l.createElement("title",null,"22->25"),l.createElement("path",{fill:"none",stroke:"#000",d:"M30.919-443.84c2.64 10.453 6.64 23.653 12.081 34.64 2.018 4.074 4.485 8.181 7.089 12.09"}),l.createElement("path",{stroke:"#000",d:"m52.942-399.137 2.94 10.178-8.646-6.123 5.706-4.055z"}),l.createElement("text",{textAnchor:"middle",x:53.5,y:-413.4,fontFamily:"Times,serif",fontSize:14},"124")),l.createElement("g",{className:"node"},l.createElement("title",null,"26"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:141,cy:-373.2,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:141,y:-369,fontFamily:"Times,serif",fontSize:14},"26")),l.createElement("g",{className:"edge"},l.createElement("title",null,"23->26"),l.createElement("path",{fill:"none",stroke:"#000",d:"m109.705-444.456 19.476 44.346"}),l.createElement("path",{stroke:"#000",d:"m132.494-401.27.817 10.562-7.226-7.748 6.41-2.815z"}),l.createElement("text",{textAnchor:"middle",x:135.5,y:-413.4,fontFamily:"Times,serif",fontSize:14},"190")),l.createElement("g",{className:"edge"},l.createElement("title",null,"23->25"),l.createElement("path",{fill:"none",stroke:"#000",d:"M86.115-447.321C80.638-441.288 75.105-433.871 72-426c-2.999 7.601-4.275 16.3-4.664 24.412"}),l.createElement("path",{stroke:"#000",d:"m70.835-401.376-3.57 9.975-3.43-10.024 7 .049z"}),l.createElement("text",{textAnchor:"middle",x:82.5,y:-413.4,fontFamily:"Times,serif",fontSize:14},"112")),l.createElement("g",{className:"node"},l.createElement("title",null,"27"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:213,cy:-373.2,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:213,y:-369,fontFamily:"Times,serif",fontSize:14},"27")),l.createElement("g",{className:"edge"},l.createElement("title",null,"21->27"),l.createElement("path",{fill:"none",stroke:"#000",d:"M184.609-444.257c3.37 10.315 7.87 23.515 12.391 35.057a347 347 0 0 0 3.848 9.376"}),l.createElement("path",{stroke:"#000",d:"m204.063-401.21.806 10.565-7.218-7.755 6.411-2.81z"}),l.createElement("text",{textAnchor:"middle",x:207.5,y:-413.4,fontFamily:"Times,serif",fontSize:14},"162")),l.createElement("g",{className:"edge"},l.createElement("title",null,"21->26"),l.createElement("path",{fill:"none",stroke:"#000",d:"m171.492-444.456-18.976 44.346"}),l.createElement("path",{stroke:"#000",d:"m155.644-398.524-7.152 7.816.716-10.57 6.436 2.754z"}),l.createElement("text",{textAnchor:"middle",x:171,y:-413.4,fontFamily:"Times,serif",fontSize:14},"82")),l.createElement("g",{className:"edge"},l.createElement("title",null,"24->28"),l.createElement("path",{fill:"none",stroke:"#000",d:"m260.125-444.456 15.238 43.65"}),l.createElement("path",{stroke:"#000",d:"m278.79-401.606-.008 10.594-6.6-8.287 6.608-2.307z"}),l.createElement("text",{textAnchor:"middle",x:282.5,y:-413.4,fontFamily:"Times,serif",fontSize:14},"250")),l.createElement("g",{className:"edge"},l.createElement("title",null,"24->27"),l.createElement("path",{fill:"none",stroke:"#000",d:"m245.9-444.456-20.604 44.625"}),l.createElement("path",{stroke:"#000",d:"m228.314-398.017-7.37 7.612 1.014-10.547 6.356 2.935z"}),l.createElement("text",{textAnchor:"middle",x:247.5,y:-413.4,fontFamily:"Times,serif",fontSize:14},"104")),l.createElement("g",{className:"node"},l.createElement("title",null,"29"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:249,cy:-284.4,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:249,y:-280.2,fontFamily:"Times,serif",fontSize:14},"29")),l.createElement("g",{className:"edge"},l.createElement("title",null,"28->29"),l.createElement("path",{fill:"none",stroke:"#000",d:"M277.888-355.656 259.91-311.31"}),l.createElement("path",{stroke:"#000",d:"m263.098-309.86-7 7.952.513-10.582 6.487 2.63z"}),l.createElement("text",{textAnchor:"middle",x:277,y:-324.6,fontFamily:"Times,serif",fontSize:14},"58")),l.createElement("g",{className:"node"},l.createElement("title",null,"31"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:177,cy:-284.4,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:177,y:-280.2,fontFamily:"Times,serif",fontSize:14},"31")),l.createElement("g",{className:"edge"},l.createElement("title",null,"27->31"),l.createElement("path",{fill:"none",stroke:"#000",d:"M205.888-355.656 187.91-311.31"}),l.createElement("path",{stroke:"#000",d:"m191.098-309.86-7 7.952.513-10.582 6.487 2.63z"}),l.createElement("text",{textAnchor:"middle",x:208.5,y:-324.6,fontFamily:"Times,serif",fontSize:14},"132")),l.createElement("g",{className:"edge"},l.createElement("title",null,"27->29"),l.createElement("path",{fill:"none",stroke:"#000",d:"m220.112-355.656 17.978 44.346"}),l.createElement("path",{stroke:"#000",d:"m241.389-312.49.513 10.582-7-7.952 6.487-2.63z"}),l.createElement("text",{textAnchor:"middle",x:244.5,y:-324.6,fontFamily:"Times,serif",fontSize:14},"156")),l.createElement("g",{className:"node"},l.createElement("title",null,"30"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:105,cy:-284.4,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:105,y:-280.2,fontFamily:"Times,serif",fontSize:14},"30")),l.createElement("g",{className:"edge"},l.createElement("title",null,"26->30"),l.createElement("path",{fill:"none",stroke:"#000",d:"M133.888-355.656 115.91-311.31"}),l.createElement("path",{stroke:"#000",d:"m119.098-309.86-7 7.952.513-10.582 6.487 2.63z"}),l.createElement("text",{textAnchor:"middle",x:134,y:-324.6,fontFamily:"Times,serif",fontSize:14},"98")),l.createElement("g",{className:"edge"},l.createElement("title",null,"26->31"),l.createElement("path",{fill:"none",stroke:"#000",d:"M143.438-355.092c1.813 10.436 4.813 23.636 9.562 34.692 1.621 3.774 3.645 7.579 5.826 11.229"}),l.createElement("path",{stroke:"#000",d:"m161.928-310.82 2.5 10.297-8.374-6.49 5.874-3.806z"}),l.createElement("text",{textAnchor:"middle",x:163.5,y:-324.6,fontFamily:"Times,serif",fontSize:14},"128")),l.createElement("g",{className:"edge"},l.createElement("title",null,"25->30"),l.createElement("path",{fill:"none",stroke:"#000",d:"M67.073-354.92c-.392 10.493.358 23.692 4.927 34.52 2.184 5.175 5.448 10.083 9.086 14.514"}),l.createElement("path",{stroke:"#000",d:"m83.71-308.203 4.177 9.736-9.337-5.006 5.16-4.73z"}),l.createElement("text",{textAnchor:"middle",x:82.5,y:-324.6,fontFamily:"Times,serif",fontSize:14},"336")),l.createElement("g",{className:"node"},l.createElement("title",null,"33"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:153,cy:-195.6,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:153,y:-191.4,fontFamily:"Times,serif",fontSize:14},"33")),l.createElement("g",{className:"edge"},l.createElement("title",null,"30->33"),l.createElement("path",{fill:"none",stroke:"#000",d:"m114.255-267.279 24.597 45.506"}),l.createElement("path",{stroke:"#000",d:"m142.097-223.13 1.677 10.461-7.835-7.133 6.158-3.328z"}),l.createElement("text",{textAnchor:"middle",x:144.5,y:-235.8,fontFamily:"Times,serif",fontSize:14},"188")),l.createElement("g",{className:"node"},l.createElement("title",null,"32"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:225,cy:-195.6,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:225,y:-191.4,fontFamily:"Times,serif",fontSize:14},"32")),l.createElement("g",{className:"edge"},l.createElement("title",null,"31->32"),l.createElement("path",{fill:"none",stroke:"#000",d:"m186.255-267.279 24.597 45.506"}),l.createElement("path",{stroke:"#000",d:"m214.097-223.13 1.677 10.461-7.835-7.133 6.158-3.328z"}),l.createElement("text",{textAnchor:"middle",x:212,y:-235.8,fontFamily:"Times,serif",fontSize:14},"84")),l.createElement("g",{className:"edge"},l.createElement("title",null,"31->33"),l.createElement("path",{fill:"none",stroke:"#000",d:"m172.143-266.43-11.675 43.199"}),l.createElement("path",{stroke:"#000",d:"m163.838-222.284-5.988 8.74-.77-10.566 6.757 1.826z"}),l.createElement("text",{textAnchor:"middle",x:175,y:-235.8,fontFamily:"Times,serif",fontSize:14},"62")),l.createElement("g",{className:"edge"},l.createElement("title",null,"29->32"),l.createElement("path",{fill:"none",stroke:"#000",d:"m244.143-266.43-11.675 43.199"}),l.createElement("path",{stroke:"#000",d:"m235.838-222.284-5.988 8.74-.77-10.566 6.757 1.826z"}),l.createElement("text",{textAnchor:"middle",x:249.5,y:-235.8,fontFamily:"Times,serif",fontSize:14},"392")),l.createElement("g",{className:"node"},l.createElement("title",null,"34"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:189,cy:-106.8,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:189,y:-102.6,fontFamily:"Times,serif",fontSize:14},"34")),l.createElement("g",{className:"edge"},l.createElement("title",null,"32->34"),l.createElement("path",{fill:"none",stroke:"#000",d:"M217.888-178.056 199.91-133.71"}),l.createElement("path",{stroke:"#000",d:"m203.098-132.26-7 7.952.513-10.582 6.487 2.63z"}),l.createElement("text",{textAnchor:"middle",x:217,y:-147,fontFamily:"Times,serif",fontSize:14},"92")),l.createElement("g",{className:"edge"},l.createElement("title",null,"33->34"),l.createElement("path",{fill:"none",stroke:"#000",d:"m160.112-178.056 17.978 44.346"}),l.createElement("path",{stroke:"#000",d:"m181.389-134.89.513 10.582-7-7.952 6.487-2.63z"}),l.createElement("text",{textAnchor:"middle",x:185.5,y:-147,fontFamily:"Times,serif",fontSize:14},"158")),l.createElement("g",{className:"node"},l.createElement("title",null,"35"),l.createElement("ellipse",{fill:"none",stroke:"#000",cx:189,cy:-18,rx:27,ry:18}),l.createElement("text",{textAnchor:"middle",x:189,y:-13.8,fontFamily:"Times,serif",fontSize:14},"35")),l.createElement("g",{className:"edge"},l.createElement("title",null,"34->35"),l.createElement("path",{fill:"none",stroke:"#000",d:"M189-88.4v41.933"}),l.createElement("path",{stroke:"#000",d:"m192.5-46.072-3.5 10-3.5-10h7z"}),l.createElement("text",{textAnchor:"middle",x:196,y:-58.2,fontFamily:"Times,serif",fontSize:14},"49")))))},d={},p="Day 23: A Long Walk",h={unversionedId:"2023/puzzles/day23",id:"2023/puzzles/day23",title:"Day 23: A Long Walk",description:"by @stewSquared",source:"@site/target/mdoc/2023/puzzles/day23.md",sourceDirName:"2023/puzzles",slug:"/2023/puzzles/day23",permalink:"/scala-advent-of-code/2023/puzzles/day23",draft:!1,editUrl:"https://github.com/scalacenter/scala-advent-of-code/edit/website/docs/2023/puzzles/day23.md",tags:[],version:"current",frontMatter:{},sidebar:"adventOfCodeSidebar",previous:{title:"Day 22: Sand Slabs",permalink:"/scala-advent-of-code/2023/puzzles/day22"},next:{title:"Day 24: Never Tell Me The Odds",permalink:"/scala-advent-of-code/2023/puzzles/day24"}},f={},x=[{value:"Puzzle description",id:"puzzle-description",level:2},{value:"Solution",id:"solution",level:2},{value:"Overview and Observations",id:"overview-and-observations",level:3},{value:"Framework",id:"framework",level:3},{value:"Finding Connected Junctions",id:"finding-connected-junctions",level:3},{value:"Part 1",id:"part-1",level:3},{value:"Part 2",id:"part-2",level:3},{value:"Final Code",id:"final-code",level:2},{value:"Solutions from the community",id:"solutions-from-the-community",level:2}],E={toc:x};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},E,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"day-23-a-long-walk"},"Day 23: A Long Walk"),(0,i.kt)("p",null,"by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/stewSquared"},"@stewSquared")),(0,i.kt)("h2",{id:"puzzle-description"},"Puzzle description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://adventofcode.com/2023/day/23"},"https://adventofcode.com/2023/day/23")),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("h3",{id:"overview-and-observations"},"Overview and Observations"),(0,i.kt)("p",null,"The general problem of finding the longest path through a grid or a graph is NP-hard, so we won't be using any fancy algorithms or heuristics today; we'll use a depth-first backtracking search. For part 2, we'll need some optimizations (graph compression and bitmasking) that reduce the size of the search space and visited set so the algorithm can run in around 2 seconds."),(0,i.kt)("p",null,"The general approach to finding the longest path via DFS is to maintain a set of visited positions alongside the current position. The next position can be any adjacent position that isn't in the visited set. We then recursively search from one of those adjacent positions until we find the end, note the path length, then try the other adjacent positions, keeping the longest path length we find."),(0,i.kt)("p",null,"For both problems, it is worth noticing that the vast majority of path positions in the maze are only connected to two other paths, so when entering from one path, there is only one path from which we can exit. Some paths are connected to three or four other paths. These paths, we'll call junctions."),(0,i.kt)("p",null,"Each junction might have two or three adjacent paths we can enter. When we exit a junction, we will inevitably reach another junction (or the end of the maze). Because of this, every path through the maze is fully determined by the sequence of junctions it enters. This allows us two optimizations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can compress the grid into an adjacency graph of vertices (the junctions) with weighted edges (the distance of the path between junctions) to other vertices. This allows us to have a distinctly smaller visited set, as there are only ~35 junctions in the puzzle input. This also avoids re-computing the distance between two junctions as we might in a cell-by-cell search of the grid. On my machine, this drops the run time for part 2 from 1 minute to ~10 seconds (90%).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For each iteration of the search through this graph, we check all adjacent junctions against the visited set. When using a hash set, this will result in computing hashes of position coordinates tens of millions of times. We can avoid this by giving each junction an index and using a BitSet of these indices as our visited set. Checking for membership in a BitSet only requires a bitshift and a bitwise AND mask. On my machine, this drops the run time from ~7 seconds to ~2 seconds (70%)."))),(0,i.kt)("p",null,"For part 1, neither of these optimizations are necessary. To understand why, notice that every junction is surrounded by slopes. When a junction is surrounded by four slopes, as most of them are, two are incoming and two are outgoing. For part 1, these are arranged in such a way that the adjacency graph becomes a directed acyclic graph, with a greatly reduced search space. One way to notice this early on is to generate a visualization via GraphViz, such as the following:"),(0,i.kt)(o,{mdxType:"ExpandImage"},(0,i.kt)(m,{mdxType:"GraphVizSvg"})),(0,i.kt)("h3",{id:"framework"},"Framework"),(0,i.kt)("p",null,"First we define a ",(0,i.kt)("inlineCode",{parentName:"p"},"Point")," case class for representing coordinates, and a ",(0,i.kt)("inlineCode",{parentName:"p"},"Dir"),' enum for representing direction. Direction will be used when "walking" on a path through the maze to calculate whether a slope blocks us and to prevent us from searching adjacent points that are backwards. Similar definitions show up in solutions to other Advent of Code problems:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"case class Point(x: Int, y: Int):\n  def dist(p: Point) = math.abs(x - p.x) + math.abs(y - p.y)\n  def adjacent = List(copy(x = x + 1), copy(x = x - 1), copy(y = y + 1), copy(y = y - 1))\n\n  def move(dir: Dir) = dir match\n    case Dir.N => copy(y = y - 1)\n    case Dir.S => copy(y = y + 1)\n    case Dir.E => copy(x = x + 1)\n    case Dir.W => copy(x = x - 1)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"enum Dir:\n  case N, S, E, W\n\n  def turnRight = this match\n    case Dir.N => E\n    case Dir.E => S\n    case Dir.S => W\n    case Dir.W => N\n\n  def turnLeft = this match\n    case Dir.N => W\n    case Dir.W => S\n    case Dir.S => E\n    case Dir.E => N\n")),(0,i.kt)("p",null,"Next we create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Maze")," class that will give us basic information about the maze from the raw data:"),(0,i.kt)(r.Z,{mdxType:"Literate"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"case class Maze(grid: Vector[Vector[Char]]):\n\n  def apply(p: Point): Char = grid(p.y)(p.x)\n\n  val xRange: Range = grid.head.indices\n  val yRange: Range = grid.indices\n\n  def points: Iterator[Point] = for\n    y <- yRange.iterator\n    x <- xRange.iterator\n  yield Point(x, y)\n")),(0,i.kt)("p",null,"So far we just have helper methods. The next few definitions are the things we'll really want to ",(0,i.kt)("em",{parentName:"p"},"know")," about the maze in order to construct our solutions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"  val walkable: Set[Point] = points.filter(p => grid(p.y)(p.x) != '#').toSet\n  val start: Point = walkable.minBy(_.y)\n  val end: Point = walkable.maxBy(_.y)\n\n  val junctions: Set[Point] = walkable.filter: p =>\n    Dir.values.map(p.move).count(walkable) > 2\n  .toSet + start + end\n")),(0,i.kt)("p",null,"Here we can populate which points are slopes by looking up a point with ",(0,i.kt)("inlineCode",{parentName:"p"},"this.apply(p)"),", shortened to ",(0,i.kt)("inlineCode",{parentName:"p"},"this(p)"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"  val slopes: Map[Point, Dir] = Map.from:\n    points.collect:\n      case p if this(p) == '^' => p -> Dir.N\n      case p if this(p) == 'v' => p -> Dir.S\n      case p if this(p) == '>' => p -> Dir.E\n      case p if this(p) == '<' => p -> Dir.W\nend Maze\n"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"walkable")," gives us the set of points that are not walls, ie., they are paths or slopes."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"junctions")," gives us the junction points mentioned in the overview, ie., paths that have multiple entrances or exits. Notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"start")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"end")," are part of the set here. While these are not true junctions, we do want them to appear in our adjacency graph."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"slopes")," gives us the direction of each slope. For Part 1, these are the directions one must be travelling in order to progress past a slope position."),(0,i.kt)("h3",{id:"finding-connected-junctions"},"Finding Connected Junctions"),(0,i.kt)("p",null,"Next, we need an algorithm for finding junctions that are connected to a given junction, while tracking the distance travelled to reach that junction. This is the heart of our solution, and is necessary for both parts 1 and 2:"),(0,i.kt)(r.Z,{mdxType:"Literate"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"def connectedJunctions(pos: Point)(using maze: Maze) = List.from:\n  assert(maze.junctions.contains(pos))\n")),(0,i.kt)("p",null,"This ",(0,i.kt)("inlineCode",{parentName:"p"},"walk")," helper method attempts to move in a given direction from a given position, accounting for walls and slopes in the maze. This alternatively could have been defined as a method on ",(0,i.kt)("inlineCode",{parentName:"p"},"Point")," itself."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"  def walk(pos: Point, dir: Dir): Option[Point] =\n    val p = pos.move(dir)\n    Option.when(maze.walkable(p) && maze.slopes.get(p).forall(_ == dir))(p)\n")),(0,i.kt)("p",null,"This ",(0,i.kt)("inlineCode",{parentName:"p"},"search")," helper method walks down a path from a junction while tracking the current direction and distance. ",(0,i.kt)("inlineCode",{parentName:"p"},"adjacentSearch")," attempts to walk recursively in directions that don't go backwards. A LazyList is used here to prevent stack overflows. If there is only one adjacent path to walk too, we continue searching that path recursively until we reach a junction, otherwise, we have reached a dead end; ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," represents the fact that no new junctions are reachable down this path."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"  def search(pos: Point, facing: Dir, dist: Int): Option[(Point, Int)] =\n    if maze.junctions.contains(pos) then Some(pos, dist) else\n      val adjacentSearch = for\n        nextFacing <- LazyList(facing, facing.turnRight, facing.turnLeft)\n        nextPos <- walk(pos, nextFacing)\n      yield search(nextPos, nextFacing, dist + 1)\n\n      if adjacentSearch.size == 1 then adjacentSearch.head else None\n")),(0,i.kt)("p",null,"Finally, we begin the search in each direction from our current junction, returning all the connected junctions found."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"  for\n    d <- Dir.values\n    p <- walk(pos, d)\n    junction <- search(p, d, 1)\n  yield junction\nend connectedJunctions\n"))),(0,i.kt)("h3",{id:"part-1"},"Part 1"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"connectedJunctions")," is sufficient to solve Part 1 quickly:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'def part1(input: String): Int =\n  given Maze = Maze(parseInput(input))\n  longestDownhillHike\n\ndef parseInput(fileContents: String): Vector[Vector[Char]] =\n  Vector.from:\n    fileContents.split("\\n").map(_.toVector)\n\ndef longestDownhillHike(using maze: Maze): Int =\n  def search(pos: Point, dist: Int): Int =\n    if pos == maze.end then dist else\n      connectedJunctions(pos).foldLeft(0):\n        case (max, (n, d)) => max.max(search(n, dist + d))\n\n  search(maze.start, 0)\nend longestDownhillHike\n')),(0,i.kt)("p",null,"This uses a recursive helper method named ",(0,i.kt)("inlineCode",{parentName:"p"},"search"),". Beginning with ",(0,i.kt)("inlineCode",{parentName:"p"},"start"),", we recursively search for the longest path starting at each of the connected junctions."),(0,i.kt)("h3",{id:"part-2"},"Part 2"),(0,i.kt)("p",null,"For part 2, we'll implement the optimization mentioned in the overview, namely, bitmasking and graph compression. Graph compression is partially implemented in ",(0,i.kt)("inlineCode",{parentName:"p"},"connectedJunctions"),", but we'll want to avoid recomputation by storing the full graph as a map from a junction, to a list of connected junctions and the distances to each of those junctions."),(0,i.kt)(r.Z,{mdxType:"Literate"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"def part2(input: String): Int =\n  given Maze = Maze(parseInput(input))\n  longestHike\n\ndef longestHike(using maze: Maze): Int =\n  type Index = Int\n")),(0,i.kt)("p",null,"We begin by assigning indices to each of the junctions, by sorting them (in any way, as long as the ordering is well-defined) and zipping with an index:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"  val indexOf: Map[Point, Index] =\n    maze.junctions.toList.sortBy(_.dist(maze.start)).zipWithIndex.toMap\n")),(0,i.kt)("p",null,"Next, we define an adjacency graph. Since ",(0,i.kt)("inlineCode",{parentName:"p"},"connectedJunctions")," takes slopes into account, and we no longer care about slopes for part 2, we add both the forward and reverse directions into our Map. Note how we translate the Point locations used by ",(0,i.kt)("inlineCode",{parentName:"p"},"connectedJunctions")," into indices using ",(0,i.kt)("inlineCode",{parentName:"p"},"indexOf"),", defined above:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"  val adjacent: Map[Index, List[(Index, Int)]] =\n    maze.junctions.toList.flatMap: p1 =>\n      connectedJunctions(p1).flatMap: (p2, d) =>\n        val forward = indexOf(p1) -> (indexOf(p2), d)\n        val reverse = indexOf(p2) -> (indexOf(p1), d)\n        List(forward, reverse)\n    .groupMap(_._1)(_._2)\n")),(0,i.kt)("p",null,"Finally, we perform a depth-first search that is very similar to what we used in Part 1.\nThe main differences are that we now use indices of junctions rather than ",(0,i.kt)("inlineCode",{parentName:"p"},"Point"),"s representing current position, and we now check adjacent junctions against a BitSet of visited points, which we now track as we search recursively."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"  def search(junction: Index, visited: BitSet, totalDist: Int): Int =\n    if junction == indexOf(maze.end) then totalDist else\n      adjacent(junction).foldLeft(0):\n        case (longest, (nextJunct, dist)) =>\n          if visited(nextJunct) then longest else\n            longest.max(search(nextJunct, visited + nextJunct, totalDist + dist))\n\n  search(indexOf(maze.start), BitSet.empty, 0)\nend longestHike\n"))),(0,i.kt)("h2",{id:"final-code"},"Final Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import collection.immutable.BitSet\n\ndef part1(input: String): Int =\n  given Maze = Maze(parseInput(input))\n  longestDownhillHike\n\ndef part2(input: String): Int =\n  given Maze = Maze(parseInput(input))\n  longestHike\n\ndef parseInput(fileContents: String): Vector[Vector[Char]] =\n  Vector.from:\n    fileContents.split(\"\\n\").map(_.toVector)\n\nenum Dir:\n  case N, S, E, W\n\n  def turnRight = this match\n    case Dir.N => E\n    case Dir.E => S\n    case Dir.S => W\n    case Dir.W => N\n\n  def turnLeft = this match\n    case Dir.N => W\n    case Dir.W => S\n    case Dir.S => E\n    case Dir.E => N\n\ncase class Point(x: Int, y: Int):\n  def dist(p: Point) = math.abs(x - p.x) + math.abs(y - p.y)\n  def adjacent = List(copy(x = x + 1), copy(x = x - 1), copy(y = y + 1), copy(y = y - 1))\n\n  def move(dir: Dir) = dir match\n    case Dir.N => copy(y = y - 1)\n    case Dir.S => copy(y = y + 1)\n    case Dir.E => copy(x = x + 1)\n    case Dir.W => copy(x = x - 1)\n\ncase class Maze(grid: Vector[Vector[Char]]):\n\n  def apply(p: Point): Char = grid(p.y)(p.x)\n\n  val xRange: Range = grid.head.indices\n  val yRange: Range = grid.indices\n\n  def points: Iterator[Point] = for\n    y <- yRange.iterator\n    x <- xRange.iterator\n  yield Point(x, y)\n\n  val walkable: Set[Point] = points.filter(p => grid(p.y)(p.x) != '#').toSet\n  val start: Point = walkable.minBy(_.y)\n  val end: Point = walkable.maxBy(_.y)\n\n  val junctions: Set[Point] = walkable.filter: p =>\n    Dir.values.map(p.move).count(walkable) > 2\n  .toSet + start + end\n\n  val slopes: Map[Point, Dir] = Map.from:\n    points.collect:\n      case p if this(p) == '^' => p -> Dir.N\n      case p if this(p) == 'v' => p -> Dir.S\n      case p if this(p) == '>' => p -> Dir.E\n      case p if this(p) == '<' => p -> Dir.W\nend Maze\n\ndef connectedJunctions(pos: Point)(using maze: Maze) = List.from:\n  def walk(pos: Point, dir: Dir): Option[Point] =\n    val p = pos.move(dir)\n    Option.when(maze.walkable(p) && maze.slopes.get(p).forall(_ == dir))(p)\n\n  def search(pos: Point, facing: Dir, dist: Int): Option[(Point, Int)] =\n    if maze.junctions.contains(pos) then Some(pos, dist) else\n      val adjacentSearch = for\n        nextFacing <- LazyList(facing, facing.turnRight, facing.turnLeft)\n        nextPos <- walk(pos, nextFacing)\n      yield search(nextPos, nextFacing, dist + 1)\n\n      if adjacentSearch.size == 1 then adjacentSearch.head else None\n\n  for\n    d <- Dir.values\n    p <- walk(pos, d)\n    junction <- search(p, d, 1)\n  yield junction\nend connectedJunctions\n\ndef longestDownhillHike(using maze: Maze): Int =\n  def search(pos: Point, dist: Int): Int =\n    if pos == maze.end then dist else\n      connectedJunctions(pos).foldLeft(0):\n        case (max, (n, d)) => max.max(search(n, dist + d))\n\n  search(maze.start, 0)\nend longestDownhillHike\n\ndef longestHike(using maze: Maze): Int =\n  type Index = Int\n\n  val indexOf: Map[Point, Index] =\n    maze.junctions.toList.sortBy(_.dist(maze.start)).zipWithIndex.toMap\n\n  val adjacent: Map[Index, List[(Index, Int)]] =\n    maze.junctions.toList.flatMap: p1 =>\n      connectedJunctions(p1).flatMap: (p2, d) =>\n        val forward = indexOf(p1) -> (indexOf(p2), d)\n        val reverse = indexOf(p2) -> (indexOf(p1), d)\n        List(forward, reverse)\n    .groupMap(_._1)(_._2)\n\n  def search(junction: Index, visited: BitSet, totalDist: Int): Int =\n    if junction == indexOf(maze.end) then totalDist else\n      adjacent(junction).foldLeft(0):\n        case (longest, (nextJunct, dist)) =>\n          if visited(nextJunct) then longest else\n            longest.max(search(nextJunct, visited + nextJunct, totalDist + dist))\n\n  search(indexOf(maze.start), BitSet.empty, 0)\nend longestHike\n")),(0,i.kt)("h2",{id:"solutions-from-the-community"},"Solutions from the community"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/stewSquared/advent-of-code/blob/master/src/main/scala/2023/Day23.worksheet.sc"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/stewSquared"},"Stewart Stewart")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/xRuiAlves/advent-of-code-2023/blob/main/Day23.scala"},"Solution")," by ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/xRuiAlves/"},"Rui Alves"))),(0,i.kt)("p",null,"Share your solution to the Scala community by editing this page.\nYou can even write the whole article! ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/scalacenter/scala-advent-of-code/discussions/424"},"See here for the expected format")))}u.isMDXComponent=!0}}]);